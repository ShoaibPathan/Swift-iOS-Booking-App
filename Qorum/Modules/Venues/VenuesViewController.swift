//
//  VenuesViewController.swift
//  Qorum
//
//  Created by Vadym Riznychok on 9/25/17.
//  Copyright (c) 2017 Bizico. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreLocation
import DeviceKit
import Mixpanel

protocol VenuesDisplayLogic: class {
    
    /// Displays current state
    ///
    /// - Parameter viewModel: model to display
    func display(viewModel: Venues.ViewModel)
}

class VenuesViewController: BaseViewController, SBInstantiable {
    
    static let storyboardName = StoryboardName.venues
    var interactor: VenuesBusinessLogic?
    var router: (NSObjectProtocol & VenuesRoutingLogic & VenuesDataPassing)?
    
    var venues: [Venue] = [] {
        didSet {
            if controllers.count == 3 {
                controllers[0].venues = venues.sorted { lhs, rhs in
                    switch (lhs.distanceString, rhs.distanceString) {
                    case (.some(let lDistanceString), .some(let rDistanceString)):
                        if lDistanceString == rDistanceString {
                            if lhs.isOpen == rhs.isOpen {
                                guard
                                    let lDistance = lhs.distance,
                                    let rDistance = rhs.distance else { return true } // unexpected
                                return lDistance < rDistance
                            } else {
                                return lhs.isOpen
                            }
                        }
                        guard
                            let lDistance = Double(lDistanceString),
                            let rDistance = Double(rDistanceString) else { return true } // unexpected
                        return lDistance < rDistance
                    case (.none, .some):
                        return false
                    default:
                        return true
                    }
                }
                controllers[1].venues = venues.sorted {
                    $0.sortName.localizedCaseInsensitiveCompare($1.sortName) == .orderedAscending
                }
                controllers[2].venues = venues.sorted(by: { $0.discount! > $1.discount! })
            }
            if oldValue.count == 0 || venues.count > 0 {
                setUI(hidden: false, animated: true)
            }
            if oldValue.count == 0 {
                display(viewModel: .openVenues)
            }
        }
    }
    
    // MARK: - Outlets
    @IBOutlet weak var viewContainer: UIView!
    @IBOutlet weak var searchView: UIView!
    @IBOutlet weak var accountButton: ProfileIconButton!
    @IBOutlet weak var searchBar: QorumSearchBar!
    @IBOutlet weak var mapButtonBackgroundImage: UIImageView!
    @IBOutlet weak var mapButton: UIButton!
    @IBOutlet weak var bottomGradientView: GradientView!
    @IBOutlet weak var bottomButtonGradientView: GradientView!
    @IBOutlet weak var mapButtonBottom: NSLayoutConstraint!
    @IBOutlet weak var selectionView: VenuesSelectionView!
    @IBOutlet weak var pageContainer: UIView!
    @IBOutlet weak var referView: UIView!
    @IBOutlet weak var freeUberButton: UIButton!
    @IBOutlet weak var pageContainerTopOffset: NSLayoutConstraint!
    
    /// flag is used for scrolling the venues list to top when map opened
    var presentingMap: Bool = false
    
    /// indicates if in the middle of loading venues
    var isLoadingVenues: Bool = false
    
    var selectedVenueId: Int?
    
    var selectedCell: VenuesCollectionCell? {
        guard let controller = pageController?.viewControllers?.first as? VenuesContainerController else { return nil }
        let cells = controller.collectionView.visibleCells
        let venueCells = cells.compactMap { $0 as? VenuesCollectionCell }
        let selected = venueCells.first(where: {
            $0.id == selectedVenueId && $0.id.hasValue && selectedVenueId.hasValue
        })
        return selected
    }
    
    // MARK: - Content
    
    var pageController: UIPageViewController!
    
    var controllers: [VenuesContainerController] = []
    
    var currentIndex = 0
    
    lazy var mainOverlayView: VenuesMainOverlayView = {
        let overlayAction: (() -> ()) = { [weak self] in
            self?.animateDisablingActions(duration: 1, animations: { [weak self] in
                self?.mainOverlayView.alpha = 0
            }) { [weak self] in
                self?.mainOverlayView.removeFromSuperview()
                self?.interactor?.mainOverlayClosed()
            }
        }
        return VenuesMainOverlayView(frame: view.frame,
                                     action: overlayAction,
                                     accountButton: accountButton)
    }()
    
    lazy var freeUberOverlayView: VenuesFreeUberOverlayView = {
        let uberAction: (() -> ()) = { [weak self] in
            self?.animateDisablingActions(duration: 1, animations: { [weak self] in
                self?.freeUberOverlayView.alpha = 0
            }) { [weak self] in
                self?.freeUberOverlayView.removeFromSuperview()
            }
        }
        return VenuesFreeUberOverlayView(frame: view.frame,
                                         action: uberAction,
                                         freeUberButton: self.freeUberButton)
    }()
    
    // MARK: - Calculations
    let containerPosConst = CGFloat(101)
    var containerPos = CGFloat(101)
    
    // MARK: - Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    deinit {
        print("Venue list deinit")
        NotificationCenter.default.removeObserver(self)
    }
    
    // MARK: - Setup
    
    private func setup() {
        let viewController = self
        let interactor = VenuesInteractor()
        let presenter = VenuesPresenter()
        let router = VenuesRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        for index in 0 ..< 3 {
            let controller = VenuesContainerController(index: index)
            controller.refreshHeader.addTarget(self, action: #selector(loadVenues), for: .valueChanged)
            controller.venuesController = viewController
            viewController.controllers.append(controller)
        }
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configureView()
        configurePageController()
        configureSelectionView()
        QorumNotification.locationUpdated.add(observer: self, selector: #selector(locationUpdated))
        QorumNotification.freeRideCheckinsLoaded.add(observer: self, selector: #selector(handleFreeRideCheckins))
        QorumNotification.needsFreeRideCheckinsUpdate.add(observer: self, selector: #selector(fetchCheckinsWithFreeRide))
        QorumNotification.selectedCityChanged.add(observer: self, selector: #selector(updateVenuesDueToSelectedCity))
        QorumNotification.bluetoothStatusChanged.add(observer: self, selector: #selector(bluetoothStateChanged))
        fetchLastCheckinsOnLoad()
        fetchCheckinsWithFreeRide()
        checkBeaconsOnboarding()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        Notification.Name.UIApplicationDidBecomeActive
            .add(observer: self, selector: #selector(checkAccess))
        accountButton.badgeView?.isHidden = User.stored.isAllVerified
        selectionView.layoutSubviews()
        checkAccess()
        presentingMap = false
        interactor?.checkReview()
        interactor?.startLocationUpdates()
        selectedVenueId = .none
        handleFreeRideCheckins()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        interactor?.stopLocationUpdates()
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        if presentingMap {
            (pageController.viewControllers?.first as! VenuesContainerController).collectionView.contentOffset = CGPoint.zero
        }
        Notification.Name.UIApplicationDidBecomeActive.remove(observer: self)
    }
    
    // MARK: - Configurations
    
    func configureView() {
        //searchBar.setup()
        searchBar.cancelButton.isHidden = true
        searchBar.delegate = self
        setUI(hidden: true, animated: false)
        searchBar.allSubviews.find(UITextField.self)?.font = UIFont.montserrat.medium(14)
        if #available(iOS 11, *) {
            let isIphoneX = UIApplication.shared.keyWindow?.safeAreaInsets.bottom != 0
            bottomGradientView.isHidden = !isIphoneX
            bottomButtonGradientView.isHidden = !isIphoneX
            mapButtonBottom.constant = isIphoneX ? -22 : -17
        } else {
            bottomGradientView.isHidden = true
            bottomButtonGradientView.isHidden = true
            mapButtonBottom.constant = -17
        }
    }
    
    func configurePageController() {
        controllers.forEach({ $0.delegate = self })
        pageController = childViewControllers.first as? UIPageViewController
        pageController.delegate = self
        pageController.dataSource = self
        pageController.setViewControllers([controllers.first!], direction: .forward, animated: false, completion: nil)
    }
    
    func configureSelectionView() {
        shouldAddScrollViewDelegate(should: true)
        selectionView.configureWithTitles(titles: ["nearby", "name", "discount"], delegate: self)
    }
    
    @discardableResult
    private func askedLocationAccessOnDemand() -> Bool {
        if LocationService.shared.isLocationEnabled {
            return false
        }
        if let presented = presentedViewController {
            presented.dismiss(animated: true) { [weak router] in
                router?.navigateToLocationRequest(source: self)
            }
        } else {
            router?.navigateToLocationRequest(source: self)
        }
        return true
    }
    
    func updateLocation() {
        if askedLocationAccessOnDemand() {
            return
        }
        LocationService.shared.requestLocationUpdate()
    }
    
    @objc func checkAccess() {
        if checkLocationAccess() {
            checkBluetoothAccess()
        }
    }
    
    func checkLocationAccess() -> Bool {
        //If location services not enabled - ask
        if askedLocationAccessOnDemand() {
            return false
        }
        
        //If no location - request
        guard LocationService.shared.location != nil else {
            LocationService.shared.requestLocationUpdate()
            return true
        }
        
        //If venues loaded - return
        guard venues.isEmpty else {
            return true
        }
        
        //Load venues if is not in loading process
        if isLoadingVenues == false {
            isLoadingVenues = true
            interactor?.check(.venues)
        }
        return true
    }
    
    func checkBluetoothAccess() {
        if Device().isSimulator { return }
        BluetoothHelper.shared.checkBluetooth()
    }
    
    @objc func bluetoothStateChanged() {
        let isShown = UserDefaults.standard.optionalBool(for: .showBluetoothAccessViewKey)
        if isShown == nil || isShown == false {
            if BluetoothHelper.shared.state == .poweredOff {
                router?.navigateToBluetoothRequest(source: self)
            }
        }
    }
    
    func shouldAddScrollViewDelegate(should: Bool) {
        let scrollView = pageController.view.subviews.first { $0 is UIScrollView } as! UIScrollView
        scrollView.delegate = should ? self.selectionView : nil
    }
    
    func checkBeaconsOnboarding() {
        let requestDate = UserDefaults.standard.value(forKey: UserDefaultsKeys.alwaysUseLocationRequestDate.rawValue) as? Date
        let oneWeek = Time(1, .weeks)[in: .seconds]
        let delayEmptyOrPassed = (requestDate?.timeIntervalSinceNow ?? -oneWeek) <= -oneWeek
        let didRequestAlwaysAllow = UserDefaults.standard.optionalBool(for: .didShowAlwaysUseLocationRequest)
        if delayEmptyOrPassed && didRequestAlwaysAllow != true {
            DispatchQueue.main.asyncAfter(deadline: .now() + 30) { [weak self] in
                self?.displayBeaconsOnboarding()
            }
        }
    }
    
    func displayBeaconsOnboarding() {
        self.navigationController?.pushViewController(BeaconsOnboardingViewController.fromStoryboard, animated: true)
    }
    
    @objc func updateVenuesDueToSelectedCity() {
        pageContainerTopOffset.constant = 101
        searchBar.text = CityManager.shared.selectedCity?.name ?? ""
        display(viewModel: .venues([]))
        loadVenues()
    }
    
    @objc func unlockVenuesInteraction() {
        pageController.view.isUserInteractionEnabled = true
        selectionView.enableButtons(enable: true)
    }
    
    @objc func lockVenuesInteraction() {
        pageController.view.isUserInteractionEnabled = false
        selectionView.enableButtons(enable: false)
    }
    
    func setUI(hidden: Bool,
               animated: Bool,
               duration: TimeInterval = AnimationDuration.Normal) {
        let alpha: CGFloat = hidden ? 0 : 1
        let freeUberButtonAlpha: CGFloat = (hidden || AppDelegate.shared.freeRideCheckinsHash.isEmpty) ? 0 : 1
        let alphaSet = { [weak self] in
            self?.searchView.alpha = alpha
            self?.selectionView.alpha = alpha
            self?.mapButton.alpha = alpha
            self?.mapButtonBackgroundImage.alpha = alpha
            self?.freeUberButton.alpha = freeUberButtonAlpha
        }
        let completion: (Bool) -> () = { [weak freeUberButton] _ in
            freeUberButton?.alpha = 1
            freeUberButton?.isHidden = freeUberButtonAlpha == 0
        }
        if animated {
            UIView.animate(withDuration: duration,
                           animations: alphaSet,
                           completion: completion)
        } else {
            alphaSet()
            completion(true)
        }
    }
    
    // MARK: - Actions
    
    @IBAction func profileButtonPressed(_ sender: Any) {
        interactor?.openProfile()
    }
    
    @IBAction func mapButtonPressed(_ sender: Any) {
        presentingMap = true
        router?.routeToMap()
    }
    
    @IBAction func freeUberButtonPressed(_ sender: Any) {
        router?.routeToFreeUber()
    }
    
    @objc func loadVenues() {
        if isLoadingVenues {
            return
        }
        lockVenuesInteraction()
        isLoadingVenues = true
        interactor?.check(.venues)
    }
    
    // MARK: - Location
    
    @objc func locationUpdated() {
        if isLoadingVenues {
            return
        }
        isLoadingVenues = true
        interactor?.check(.venues)
    }
    
    // MARK: - Private
    
    private func fetchLastCheckinsOnLoad() {
        interactor?.fetchLastCheckins(request: .lastCheckins)
    }
    
    @objc private func fetchCheckinsWithFreeRide() {
        interactor?.fetchCheckinWithFreeRide(request: .checkinsWithFreeRide)
    }
    
    @objc func handleFreeRideCheckins() {
        if venues.count > 0 {
            let hasFreeRideCheckins = AppDelegate.shared.freeRideCheckinsHash.isNotEmpty
            if hasFreeRideCheckins {
                view.addSubview(freeUberOverlayView)
            }
            freeUberButton.isHidden = !hasFreeRideCheckins
        }
    }
    
}

// MARK: - VenuesDisplayLogic
extension VenuesViewController: VenuesDisplayLogic {
    
    func display(viewModel: Venues.ViewModel) {
        switch viewModel {
        case .mainOverlay:
            mainOverlayView.removeFromSuperview()
            view.addSubview(mainOverlayView)
        case let .venues(venues):
            self.isLoadingVenues = false
            self.venues = venues
            for controller in controllers {
                controller.refreshHeader.stopAnimating()
            }
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.3, execute: { [weak self] in
                self?.unlockVenuesInteraction()
            })
        case .openVenues:
            self.isLoadingVenues = false
            if let cityName = CityManager.shared.selectedCity?.name {
                searchBar.text = cityName
            }
            pageContainer.isHidden = true
        case .openProfile:
            router?.routeToProfile()
        case .quitGuestMode:
            router?.routeToAuth()
        case .lastCheckinsLoaded:
            let checkins = AppDelegate.shared.checkinHash.values
            if let checkin = checkins.first(where: { $0.needsReview }) {
                router?.routeToReview(checkin: checkin)
            } else if let checkin = (UIApplication.shared.delegate as! AppDelegate).checkinHash.values.first(where: { (checkin) -> Bool in
                return checkin.checkout_time == nil
            }) {
                router?.dataStore?.selectedVenueCheckin = checkin
                router?.routeToBill()
            }
        case .review:
            let checkins = AppDelegate.shared.checkinHash.values
            if let checkin = checkins.first(where: { $0.needsReview }) {
                router?.routeToReview(checkin: checkin)
            }
        }
    }
    
}

// MARK: - VenuesSelectionViewDelegate
extension VenuesViewController: VenuesSelectionViewDelegate {
    
    func selectControllerAtIndex(index: Int, completion: @escaping () -> Void) {
        guard index != currentIndex else {
            completion()
            return
        }
        pageController.view.isUserInteractionEnabled = false
        shouldAddScrollViewDelegate(should: false)
        let direction: UIPageViewControllerNavigationDirection = index > currentIndex ? .forward : .reverse
        pageController.setViewControllers([controllers[index]], direction: direction, animated: true, completion: { _ in
            self.currentIndex = index
            self.shouldAddScrollViewDelegate(should: true)
            self.pageController.view.isUserInteractionEnabled = true
            completion()
        })
    }
    
}

// MARK: - VenuesContainerDelegate
extension VenuesViewController: VenuesContainerDelegate {
    
    func scrollViewUpdatedOffset(offset: CGPoint) {
        let loading = controllers.contains { $0.refreshHeader.pullState == .loading }
        
        guard venues.count > 4 && !loading else {
            return
        }
        
        var position = containerPos + offset.y
        if position < 0 {
            position = 0
        } else if position > 101 {
            position = 101
        }
        pageContainerTopOffset.constant = position
        
        if position <= 101 && position >= 44 {
            let diff = position - 44
            selectionView.alpha = diff / 30
        } else if position < 44 {
            selectionView.alpha = 0
        } else {
            selectionView.alpha = 1
        }
        
        if position <= 43 && position >= 13 {
            let diff = position - 13
            searchView.alpha = diff / 30
        } else if position < 13 {
            searchView.alpha = 0
        } else {
            searchView.alpha = 1
        }
    }
    
    func equalizePageOffsets() {
        //let offset = (pageController.viewControllers?.first as! VenuesContainerController).collectionView.contentOffset
        let offsetDiff = (pageController.viewControllers?.first as! VenuesContainerController).offsetDiff
        controllers.forEach({
            $0.offsetDiff = offsetDiff
            $0.collectionView.contentOffset = offsetDiff
        })
        containerPos = pageContainerTopOffset.constant
    }
    
    func showDetails(for venue: Venue, by cell: VenuesCollectionCell?, controllerId: Int) {
        selectedVenueId = venue.venue_id
        
        
        interactor?.setSelectedVenue(venue: venue)
        router?.routeToVenueDetails()
        trackVenueSelection(venue: venue, controllerId: controllerId)
    }
    
    func viewTab(for venue: Venue, by cell: VenuesCollectionCell?, controllerId: Int) {
        guard let checkin = AppDelegate.shared.checkinHash.values.first(where: { $0.checkout_time == nil && $0.venue?.venue_id == venue.venue_id }) else {
            showDetails(for: venue, by: cell, controllerId: 1)
            return
        }
        selectedVenueId = venue.venue_id
        router?.dataStore?.selectedVenueCheckin = checkin
        router?.routeToBill()
        trackVenueSelection(venue: venue, controllerId: controllerId)
    }
    
    func openTab(for venue: Venue, by cell: VenuesCollectionCell?, controllerId: Int) {
        selectedVenueId = venue.venue_id
        interactor?.setSelectedVenue(venue: venue)
        router?.routeToVenueDetailsAndOpenTab()
        trackVenueSelection(venue: venue, controllerId: controllerId)
    }
    
    func trackVenueSelection(venue: Venue, controllerId: Int) {
        var sortType = ""
        switch controllerId {
        case 0:
            sortType = "Distance"
        case 1:
            sortType = "Name"
        case 2:
            sortType = "Discount"
        default:
            break
        }
        let trackProperties: [String: Any] = ["Venue Name": venue.name,
                                              "Discount": venue.discountValue,
                                              "Market": venue.market?.name ?? "",
                                              "Neighborhood": venue.neighborhood ?? "",
                                              "Venue Sort": sortType,
                                              "Venue View": "List"]
        AnalyticsService.shared.track(event: MixpanelEvents.venueSelected.rawValue,
                                      properties: trackProperties)
    }
    
    func finishedUpdatingVenues(in controller: VenuesContainerController) {
        guard controller.index == currentIndex, pageContainer.isHidden else { return }
        pageContainer.isHidden = false
        controller.collectionView.contentOffset.y = -controller.collectionView.height
        let appearAnimation: ()->() = {
            controller.collectionView.contentOffset.y = 0
        }
        let completion: (Bool)->() = { [weak interactor] _ in
            interactor?.check(.presentMainOverlayIfNeeded)
        }
        UIView.animate(withDuration: 1,
                       delay: 0,
                       usingSpringWithDamping: 1,
                       initialSpringVelocity: 17,
                       options: .curveLinear,
                       animations: appearAnimation,
                       completion: completion)
    }
    
}

// MARK: - UIPageViewControllerDelegate
extension VenuesViewController: UIPageViewControllerDelegate {
    
    func pageViewController(_ pageViewController: UIPageViewController,
                            didFinishAnimating finished: Bool,
                            previousViewControllers: [UIViewController],
                            transitionCompleted completed: Bool) {
        if completed {
            selectionView.selectedIndex = (pageViewController.viewControllers?.first as! VenuesContainerController).index
        }
    }
}

// MARK: - UIPageViewControllerDataSource
extension VenuesViewController: UIPageViewControllerDataSource {
    
    func pageViewController(_ pageViewController: UIPageViewController,
                            viewControllerAfter viewController: UIViewController) -> UIViewController? {
        let prevIndex = (viewController as! VenuesContainerController).index
        currentIndex = prevIndex + 1
        if currentIndex >= controllers.count {
            currentIndex = prevIndex
            return nil
        }
        
        return controllers[currentIndex]
    }
    
    func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -> UIViewController? {
        let beforeIndex = (viewController as! VenuesContainerController).index
        currentIndex = beforeIndex - 1
        if currentIndex < 0 {
            currentIndex = beforeIndex
            return nil
        }
        
        return controllers[currentIndex]
    }
    
}
// MARK: - QorumSearchBarDelegate
extension VenuesViewController: QorumSearchBarDelegate {
    
    func searchBarShouldBeginEditing(_ searchBar: QorumSearchBar) -> Bool {
        if !pageContainer.isHidden {
            let searchVC = SearchViewController.fromStoryboard
            searchVC.venuesController = self
            present(searchVC, animated: true, completion: nil)
        }
        return false
    }
    
    func searchBarLocationButtonClicked(_ searchBar: QorumSearchBar) {
        CityManager.shared.selectNearestCity()
    }
    
}

// MARK: - UIGestureRecognizerDelegate
extension VenuesViewController: UIGestureRecognizerDelegate {
    
    func gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer,
                           shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIGestureRecognizer) -> Bool {
        return true
    }
    
}

