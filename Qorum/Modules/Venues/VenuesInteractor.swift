//
//  VenuesInteractor.swift
//  Qorum
//
//  Created by Vadym Riznychok on 9/25/17.
//  Copyright (c) 2017 Bizico. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Mixpanel

protocol VenuesBusinessLogic: AnyObject {
    
    
    /// Actualizes current state
    ///
    /// - Parameter request: parameter to check
    func check(_ request: Venues.Request)
    
    /// Handles state after removing main overlay
    func mainOverlayClosed()
    
    /// Asks to set venue as selected
    ///
    /// - Parameter venue: venue to select
    func setSelectedVenue(venue: Venue)
    
    /// Handles Profile button action
    func openProfile()
    
    /// Asks for real time location update
    func startLocationUpdates()
    
    /// Asks to stop location update
    func stopLocationUpdates()
    
    /// Asks to fetch last Checkin
    ///
    /// - Parameter request: Checkin request
    func fetchLastCheckins(request: Venues.Request)
    
    /// Asks to fetch Checkin with Uber free ride
    ///
    /// - Parameter request: Request Model
    func fetchCheckinWithFreeRide(request: Venues.Request)
    
    /// Asks to open a Bill scene after checking in with beacon nearby
    func showCheckinFromBeacon()
    
    /// Asks to check for uncompleted reviews
    func checkReview()
}

protocol VenuesDataStore {
    
    /// current user
    var user: User { get }
    
    /// list of venues
    var venues: [Venue] { get set }
    
    /// currently selected Venue
    var selectedVenue: Venue? { get set }
    
    /// active Checkin
    var selectedVenueCheckin: Checkin? { get set }
}

class VenuesInteractor: VenuesDataStore {
    var presenter: VenuesPresentationLogic?
    private(set) lazy var worker = VenuesWorker()
    
    /// current user
    var user: User { return User.stored }
    
    /// flag for overlay presented
    var isPresentingOverlay = false
    
    /// flag for venues first time load
    var venuesIsLoaded = false
    
    /// list of venues
    var venues: [Venue]  = []
    
    /// currently selected Venue
    var selectedVenue: Venue?
    
    /// active Checkin
    var selectedVenueCheckin: Checkin?
    
    /// block to update location
    var dispatchLocationUpdateBlock: DispatchWorkItem?
}

// MARK: - VenuesBusinessLogic
extension VenuesInteractor: VenuesBusinessLogic {
    
    func check(_ request: Venues.Request) {
        switch request {
        case .venues:
            if  let loadedVenues = CityManager.shared.selectedCity?.venues,
                !loadedVenues.isEmpty,
                venues != loadedVenues
            {
                venues = loadedVenues
                QorumNotification.selectedCityVenuesUpdated.post()
                presenter?.present(response: .venues(loadedVenues))
            }
            worker.loadVenues { [weak self] result in
                guard let welf = self else { return }
                switch result {
                case let .value(venues):
                    if venues != welf.venues || welf.venues.isEmpty {
                        welf.venues = venues
                        welf.presenter?.present(response: .venues(welf.venues))
                    } else {
                        // most likely, we aleady returned the venues, so do nothing here
                    }
                case .error:
                    welf.presenter?.present(response: .venues(welf.venues))
                }
                welf.venuesIsLoaded = true
            }
        case .presentMainOverlayIfNeeded:
            guard !user.isGuest, user.settings.launchCount > 1, !user.settings.screenOverlaysSeen.contains(.mainOverlay) else { return }
            presenter?.present(response: .mainOverlay)
            isPresentingOverlay = true
        case .lastCheckins:
            return
        case .checkinsWithFreeRide:
            return
        }
    }
    
    func openProfile() {
        if User.stored.isGuest {
            presenter?.present(response: .quitGuestMode)
        } else {
            presenter?.present(response: .openProfile)
        }
    }
    
    func mainOverlayClosed() {
        isPresentingOverlay = false
        let storedUser = User.stored
        storedUser.settings.screenOverlaysSeen.insert(.mainOverlay)
        storedUser.save()
        presenter?.present(response: .openProfile)
    }
    
    func setSelectedVenue(venue: Venue) {
        selectedVenue = venue
    }
    
    func startLocationUpdates() {
        guard AppConfig.location.isReal else { return }
        print("Did start location updates")
        
        dispatchLocationUpdateBlock = DispatchWorkItem(block: {
            LocationService.shared.requestLocationUpdate()
            self.startLocationUpdates()
        })
        if let block = dispatchLocationUpdateBlock {
            DispatchQueue.main.asyncAfter(deadline: .now() + Time(1, .minutes)[in: .seconds], execute: block)
        }
    }
    
    func stopLocationUpdates() {
        print("Did stop location updates")
        dispatchLocationUpdateBlock?.cancel()
        dispatchLocationUpdateBlock = nil
    }
    
    func fetchLastCheckins(request: Venues.Request) {
        guard !user.isGuest else { return }
        worker.loadLastCheckins(userId: user.userId) {
            self.presenter?.present(response: .lastCheckinsLoaded)
        }
    }
    
    func fetchCheckinWithFreeRide(request: Venues.Request) {
        worker.loadCheckinsWithFreeUber()
    }
    
    func showCheckinFromBeacon() {
        self.presenter?.present(response: .lastCheckinsLoaded)
    }
    
    func checkReview() {
        self.presenter?.present(response: .review)
    }
    
}
