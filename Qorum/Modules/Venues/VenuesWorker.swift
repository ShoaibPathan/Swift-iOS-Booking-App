//
//  VenuesWorker.swift
//  Qorum
//
//  Created by Vadym Riznychok on 9/25/17.
//  Copyright (c) 2017 Bizico. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Moya
import SwiftyJSON

class VenuesWorker {
    
    /// Updates cashed Venue or Fetches Venue Data from server
    ///
    /// - Parameter completion: completion block
    func loadVenues(completion: @escaping APIHandler<[Venue]>) {
        if let city = CityManager.shared.selectedCity {
            city.updateVenues { result in
                switch result {
                case let .value(venues):
                    guard city == CityManager.shared.selectedCity else {
                        completion(.error("Won't return venues: selected city changed"))
                        return
                    }
                    completion(.value(venues))
                case let .error(error):
                    completion(.error(error))
                }
            }
        } else if let coordinate = LocationService.shared.location?.coordinate {
            QorumVenuesAPI.fetchVenuesForLocation(coordinate, radius: Distance(50, .miles)).performArrayDecoding { (result: APIResult<[Venue]>) in
                switch result {
                case let .value(venues):
                    let activeVenues = venues.filter { $0.isActive ?? false }
                    completion(.value(activeVenues))
                case let .error(error):
                    completion(.error(error))
                }
            }
        } else {
            completion(.error("Can't fetch venues: missing selected city and user location data"))
        }
    }
    
    /// Loads Venue
    ///
    /// - Parameters:
    ///   - venueId: venue id
    ///   - completion: completion block
    func loadVenue(venueId: Int, completion: @escaping APIHandler<Venue>) {
        let request = VenuesRequest(target: .fetchVenue(id: venueId))
        request.performDecoding(completion: completion)
    }
    
    /// Loads beacons assigned to Venue
    ///
    /// - Parameters:
    ///   - venueId: venue id
    ///   - completion: completion block
    func loadBeacons(venueId: Int, completion: @escaping APIHandler<[Beacon]>) {
        let request = VenuesRequest(target: .fetchBeacons(venueId: venueId))
        request.performArrayDecoding(completion: completion)
    }
    
    /// Loads last Checkin
    ///
    /// - Parameters:
    ///   - userId: user id
    ///   - completion: completion block
    func loadLastCheckins(userId: Int, completion: @escaping () -> Void) {
        let request = AuthenticatedRequest(target: .fetchLastCheckins(userId: userId))
        request.perform { response in
            switch response.result {
            case let .value(json):
                let appDelegate = AppDelegate.shared
                if let checkins: [Checkin] = try? Checkin.arrayFrom(json: json) {
                    // parse to array
                    if  let checkin = checkins.first(where: { $0.checkout_time == nil }),
                        let venueId = checkin.venue?.venue_id
                    {
                        appDelegate.checkinHash.updateValue(checkin, forKey: venueId)
                    }
                    if  let checkin = checkins.first(where: { $0.needsReview }),
                        let venueId = checkin.venue?.venue_id
                    {
                        appDelegate.checkinHash.updateValue(checkin, forKey: venueId)
                    }
                } else {
                    let checkinJSON = json["checkin"]
                    if  let checkin = try? Checkin.from(json: checkinJSON),
                        let venueId = checkin.venue?.venue_id
                    {
                        if checkin.checkout_time == nil || checkin.needsReview {
                            appDelegate.checkinHash.updateValue(checkin, forKey: venueId)
                        }
                    }
                }
                
                if !appDelegate.checkinHash.values.contains(where: { $0.feedback == nil }) {
                    UserDefaults.standard.set(false, for: .didShowCheckinGuideKey)
                }
                let hasCheckin = appDelegate.checkinHash.values.contains { $0.checkout_time == nil }
                UserDefaults.standard.set(hasCheckin, for: .hasActiveCheckin)
                if hasCheckin {
                    let activeCheckin = appDelegate.checkinHash.values.first(where: { $0.checkout_time == nil })
                    UserDefaults.standard.set(activeCheckin?.checkin_id ?? 0, forKey: UserDefaultsKeys.activeCheckinId.rawValue)
                    UserDefaults.standard.set(activeCheckin?.venue?.venue_id ?? 0, forKey: UserDefaultsKeys.activeCheckinVenueId.rawValue)
                } else {
                    UserDefaults.standard.removeObject(forKey: UserDefaultsKeys.activeCheckinId.rawValue)
                    UserDefaults.standard.removeObject(forKey: UserDefaultsKeys.activeCheckinVenueId.rawValue)
                }
            case let .error(error):
                if (error as? GenericError)?.status == 401 {
                    ProfileWorker().logoutUser { }
                }
                print("VenuesWorker.loadLastCheckins error:", error)
            }
            completion()
        }
    }
    
    /// Loads Checkin with free Uber ride revealed
    func loadCheckinsWithFreeUber() {
        guard !User.stored.isGuest else { return }
        let request = AuthenticatedRequest(target: .fetchCheckinsWithFreeRide(userId: User.stored.userId))
        request.perform { response in
            switch response.result {
            case let .value(json):
                if let checkins: [Checkin] = try? Checkin.arrayFrom(json: json) {
                    AppDelegate.shared.freeRideCheckinsHash = checkins
                } else {
                    AppDelegate.shared.freeRideCheckinsHash = []
                }
            case let .error(error):
                if (error as? GenericError)?.status == 401 {
                    ProfileWorker().logoutUser { }
                }
                print("VenuesWorker.loadCheckinsWithFreeUber error:", error)
            }
            QorumNotification.freeRideCheckinsLoaded.post()
        }
    }
    
}
