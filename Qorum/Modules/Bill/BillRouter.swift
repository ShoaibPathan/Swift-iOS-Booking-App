//
//  BillRouter.swift
//  Qorum
//
//  Created by Dima Tsurkan on 11/30/17.
//  Copyright (c) 2017 Bizico. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

@objc protocol BillRoutingLogic {
    
    /// Opens previous screen
    func navigateBack()
    
    /// Opens Order Uber Screen
    ///
    /// - Parameter source: controller presented from
    func routeToUber(source: UIViewController)
    
    /// Closes opened tab
    func routeToClosedTab()
    
    /// Opens Payment details Screen
    func routeToPayments()
    
    /// Opens Phone verification screen
    func routeToPhoneVerification()
}

protocol BillDataPassing {
    var dataStore: BillDataStore? { get set }
}

class BillRouter: NSObject, BillRoutingLogic, BillDataPassing {
    weak var viewController: BillViewController?
    var dataStore: BillDataStore?
  
    // MARK: Routing
    func routeToUber(source: UIViewController) {
        let destinationVC = UberOrderViewController.fromStoryboard
        let freeRideCheckin = dataStore?.checkin?.freeRideCheckin
        destinationVC.checkin = freeRideCheckin ?? dataStore?.checkin
        destinationVC.venue = dataStore?.checkin?.venue
        destinationVC.rideType = .from
        navigateToUber(source: source, destination: destinationVC)
    }
    
    func routeToClosedTab() {
        let destinationVC = ClosedTabViewController.fromStoryboard
        destinationVC.checkin = dataStore?.checkin
        navigateToClosedTab(source: viewController!, destination: destinationVC)
    }
    
    func routeToPayments() {
        let destinationVC = PaymentsViewController.fromStoryboard
        navigateToPayments(source: viewController!, destination: destinationVC)
    }
    
    func routeToPhoneVerification() {
        let destinationVC = NumberInputViewController.fromStoryboard.embeddedInNavigationController
        viewController?.present(destinationVC, animated: true, completion: nil)
    }
    
    // MARK: Navigation
    func navigateToClosedTab(source: BillViewController, destination: ClosedTabViewController) {
        viewController?.childViewControllers.forEach({ $0.removeFromParentViewController() })
        source.navigationController?.pushViewController(destination, animated: false)
    }
    
    func navigateBack() {
        viewController?.childViewControllers.forEach({ $0.removeFromParentViewController() })
        viewController?.navigationController?.popViewController(animated: true)
    }
    
    func navigateToUber(source: UIViewController, destination: UberOrderViewController) {
        viewController?.childViewControllers.forEach({ $0.removeFromParentViewController() })
        source.navigationController?.pushViewController(destination, animated: true)
        
        //Put Closed Tab controller in stack insensibly for user
        guard source is BillViewController,
              source.navigationController?.viewControllers.contains(where: { $0 is ClosedTabViewController }) == false else {
                return
        }
        
        let tabClosedVC = ClosedTabViewController.fromStoryboard
        tabClosedVC.checkin = dataStore?.checkin
        
        var controllers = source.navigationController?.viewControllers
        let ind = (controllers?.count ?? 1) - 1
        controllers?.insert(tabClosedVC, at: ind)
        source.navigationController?.viewControllers = controllers!
    }
    
    func navigateToPayments(source: UIViewController, destination: PaymentsViewController) {
        source.navigationController?.pushViewController(destination, animated: true)
    }
}
