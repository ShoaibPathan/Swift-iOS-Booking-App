//
//  BillWorker.swift
//  Qorum
//
//  Created by Dima Tsurkan on 11/30/17.
//  Copyright (c) 2017 Bizico. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SwiftyJSON
import Moya
import SwiftyBeaver

class BillWorker {
    
    /// current user
    var user: User {
        return User.stored
    }
    
    /// Gets checkin from server
    ///
    /// - Parameters:
    ///   - checkinId: checkin id
    ///   - completion: completion block
    func updateCheckIn(checkinId: Int,
                       completion: @escaping APIHandler<Checkin>) {
        let request = AuthenticatedRequest(target: .updateCheckin(userId: user.userId, checkinId: checkinId))
        SwiftyBeaver.debug(request.target.endpointDescription)
        request.performDecoding(for: "checkin", completion: completion)
    }
    
    /// Performs checkout
    ///
    /// - Parameters:
    ///   - checkinId: checkin id
    ///   - completion: completion block
    func checkOut(checkinId: Int,
                  completion: @escaping APIHandler<Checkin>) {
        let request = AuthenticatedRequest(target: .checkout(userId: user.userId, checkinId: checkinId))
        SwiftyBeaver.debug(request.target.endpointDescription)
        request.performDecoding(for: "checkin", completion: completion)
    }
    
    /// Schedules delayed checkout
    ///
    /// - Parameters:
    ///   - checkinId: checkin id
    ///   - completion: completion block
    func delayedCheckOut(checkinId: Int,
                  completion: @escaping APIHandler<Void>) {
        let request = AuthenticatedRequest(target: .delayedCheckOut(userId: user.userId, checkinId: checkinId, delayMinutes: kDelayedCheckoutMinutes))
        SwiftyBeaver.debug(request.target.endpointDescription)
        request.perform { response in
            switch response.result {
            case .value: completion(.success)
            case .error(let error): completion(.error(error))
            }
        }
    }
    
    /// Cancels scheduled checkout
    ///
    /// - Parameters:
    ///   - checkinId: checkin id
    ///   - completion: completion block
    func cancelDelayedCheckOut(checkinId: Int,
                         completion: @escaping APIHandler<Void>) {
        let request = AuthenticatedRequest(target: .cancelDelayedCheckOut(userId: user.userId, checkinId: checkinId))
        SwiftyBeaver.debug(request.target.endpointDescription)
        request.perform { response in
            switch response.result {
            case .value: completion(.success)
            case .error(let error): completion(.error(error))
            }
        }
    }
    
    /// Updates tips amount
    ///
    /// - Parameters:
    ///   - checkinId: checkin id
    ///   - tip: tips in cent or percentage from total amount
    ///   - completion: completion block
    func updateGratuity(checkinId: Int,
                        tip: BillModels.Tip,
                        completion: @escaping APIHandler<JSON>) {
        let target: QorumAuthenticatedAPI
        switch tip {
        case let .percents(percents):
            target = .updateGratuityRate(checkinId: checkinId, percents: percents)
        case let .cents(cents):
            target = .updateExactGratuity(checkinId: checkinId, cents: cents)
        }
        let request = AuthenticatedRequest(target: target)
        request.perform { response in
            switch response.result {
            case let .value(json):
                print("BillWorker updateGratuity response:\n", json)
                completion(.value(json))
            case let .error(error):
                print("BillWorker updateGratuity error:", error)
                completion(.error(error))
            }
        }
    }
    
    /// Tracks checkout event with Mixpanel
    ///
    /// - Parameters:
    ///   - venue: venue
    ///   - checkin: checkin
    ///   - method: checkout description
    func trackClose(venue: Venue?, checkin: Checkin, method: String) {
        let minutes: Double
        if let checkoutDate = checkin.checkout_time {
            let seconds = checkoutDate.timeIntervalSince(checkin.created)
            minutes = Time(seconds, .seconds)[in: .minutes]
        } else {
            minutes = Time(Date().timeIntervalSince(checkin.created), .seconds)[in: .minutes]
        }

        AnalyticsService.shared.track(event: MixpanelEvents.tabClose.rawValue,
                                      properties: ["Venue": venue?.name ?? "",
                                                   "Tab Close Method": method,
                                                   "Discount": checkin.bill?.discountValue ?? "-",
                                                   "Market": venue?.market?.name ?? "",
                                                   "Neighborhood": venue?.neighborhood ?? "",
                                                   "Time at Venue": minutes])
        UserDefaults.standard.set(nil, forKey: UserDefaultsKeys.delayedCheckinId.rawValue)
    }
    
}
