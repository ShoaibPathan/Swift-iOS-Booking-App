//
//  VenueReviewModels.swift
//  Qorum
//
//  Created by Stanislav on 10.12.2017.
//  Copyright (c) 2017 Bizico. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

struct VenueReview {
    
    /// Maximal amount of characters for review text input.
    static let kReviewCharactersLimit = 255
    
    /// User interaction cases.
    ///
    /// - tapped: User took given `Vote`.
    /// - submit: User submitted given `feedback`.
    enum Action {
        case tapped(Vote)
        case submit(feedback: String)
    }
    
    /// Represents user's vote.
    ///
    /// - vote: Contains vote.
    /// - undefinedVote: User hasn't yet voted.
    enum VoteModel: Equatable {
        case vote(Vote)
        case undefinedVote
        
        /// The rating value for the vote.
        var rating: Int {
            switch self {
            case .vote(let vote):
                switch vote {
                case .share, .like: return 1
                case .dislike: return 0
                }
            case .undefinedVote: return 0
            }
        }
        
        /// Returns the `ShareType` if the vote contains it.
        var shareType: ShareType? {
            switch self {
            case .vote(let vote):
                switch vote {
                case .share(let shareType): return shareType
                case .like, .dislike: return nil
                }
            case .undefinedVote: return nil
            }
        }
        
    }
    
    /// Represents UI for current review state.
    struct ViewModel {
        var dislikeButtonSelected = false
        var likeButtonSelected = false
        
        var shareContainerHidden = true
        var facebookButtonSelected = false
        var twitterButtonSelected = false
        var emailButtonSelected = false
        
        var submitButtonEnabled = true
        var submitButtonTitle = "SUBMIT"
    }
    
    /// An alert case.
    ///
    /// - undefinedVote: Notifies user about need to leave any vote.
    /// - submittingError: Notifies user about something went wrong during submitting.
    /// - characterLimitExceeded: Notifies user about too long feedback text.
    enum Alert {
        case undefinedVote
        case submittingError
        case characterLimitExceeded
    }
    
    /// The vote cases.
    ///
    /// - share: user liked and is going to share the feedback. üòç
    /// - like: User liked the venue. üòè
    /// - dislike: User disliked the venue. üòí
    enum Vote: Equatable {
        case share(ShareType)
        case like
        case dislike
    }
    
    /// Where user wants to share the venue to.
    enum ShareType: Equatable {
        case facebook, twitter, email
    }
    
}

