//
//  VenueReviewPresenter.swift
//  Qorum
//
//  Created by Stanislav on 10.12.2017.
//  Copyright (c) 2017 Bizico. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol VenueReviewPresentationLogic {
    
    /// Asks view controller to display venue to review.
    ///
    /// - Parameter checkin: The checkin associated with venue to review.
    func present(checkin: Checkin)
    
    /// Asks view controller to update its UI with given data.
    ///
    /// - Parameter voteModel: Represents current review state.
    func present(voteModel: VenueReview.VoteModel)
    
    /// Asks view controller to share via Facebook with given content URL.
    ///
    /// - Parameter appInviteURL: The Branch URL used to invite users to the Qorum app.
    func presentFacebookSharing(appInviteURL: URL)
    
    /// Asks view controller to display
    ///
    /// - Parameters:
    ///   - appInviteURL: The Branch URL used to invite users to the Qorum app.
    ///   - venueLink: The Twitter link to the venue, or its name, if missing.
    ///   - feedback: The feedback text to share.
    ///   - venueImage: The main image of the venue to share.
    func presentTwitterSharing(appInviteURL: URL,
                               venueLink: String,
                               feedback: String?,
                               venueImage: UIImage?)
    
    /// Asks view controller to open email composing scene.
    ///
    /// - Parameters:
    ///   - appInviteURL: The Branch URL used to invite users to the Qorum app.
    ///   - venueName: The name of the venue.
    ///   - venueLink: The Branch URL string to the Venue Details scene of the venue.
    ///   - feedback: The feedback text to share.
    ///   - venueImage: The main image of the venue to share.
    func presentEmailSharing(appInviteURL: URL,
                             venueName: String,
                             venueLink: String?,
                             feedback: String?,
                             venueImage: UIImage?)
    
    /// Asks view controller to display an alert.
    ///
    /// - Parameter alert: The enum defining the alert details.
    func present(alert: VenueReview.Alert)
    
    /// Asks view controller to display a loading HUD which says "Sending Review".
    func presentSubmittingLoader()
    
    /// Asks view controller to hide the loading HUD.
    func hideLoader()
    
    /// Asks view controller to route back
    func mayQuit()
    
}

class VenueReviewPresenter {
    weak var viewController: VenueReviewDisplayLogic?
}

// MARK: - VenueReviewPresentationLogic
extension VenueReviewPresenter: VenueReviewPresentationLogic {
    
    func present(checkin: Checkin) {
        let venueName = checkin.venue?.name ?? ""
        let imageURL = URL(string: "\(kCacheURL)\(checkin.venue?.main_photo_url ?? " ")")
         viewController?.display(venueName: venueName, imageURL: imageURL)
    }
    
    func present(voteModel: VenueReview.VoteModel) {
        var viewModel = VenueReview.ViewModel()
        switch voteModel {
        case let .vote(vote):
            switch vote {
            case let .share(shareType):
                viewModel.likeButtonSelected = true
                viewModel.shareContainerHidden = false
                switch shareType {
                case .facebook:
                    viewModel.facebookButtonSelected = true
                case .twitter:
                    viewModel.twitterButtonSelected = true
                case .email:
                    viewModel.emailButtonSelected = true
                }
                viewModel.submitButtonTitle = "SHARE THE LOVE"
            case .like:
                viewModel.likeButtonSelected = true
                viewModel.shareContainerHidden = false
            case .dislike:
                viewModel.dislikeButtonSelected = true
            }
        case .undefinedVote:
            viewModel.submitButtonEnabled = false
        }
        viewController?.display(viewModel: viewModel)
    }
    
    func presentFacebookSharing(appInviteURL: URL) {
        viewController?.shareToFacebook(contentURL: appInviteURL)
    }
    
    func presentTwitterSharing(appInviteURL: URL,
                               venueLink: String,
                               feedback: String?,
                               venueImage: UIImage?) {
        
        var contentText = "Check out \(venueLink) with @QorumApp."
        if let feedback = feedback, feedback.isNotEmpty {
            contentText.append(" \(feedback)")
        }
        viewController?.shareToTwitter(contentText: contentText,
                                       contentURL: appInviteURL,
                                       contentImage: venueImage)
    }
    
    func presentEmailSharing(appInviteURL: URL,
                             venueName: String,
                             venueLink: String?,
                             feedback: String?,
                             venueImage: UIImage?) {
        let subject = "Let's check out \(venueName) together using Qorum!"
        var venueLinked = venueName
        if let link = venueLink {
            venueLinked = venueName.htmlLinked(with: link)
        }
        var feedbackLine = ""
        if let feedback = feedback, feedback.isNotEmpty {
            feedbackLine = "Here's what I thought: \(feedback)<br/><br/>"
        }
        let qorumAppLinked = "Qorum app".htmlLinked(with: appInviteURL.absoluteString)
        let body = """
        Hey - I had a great time at \(venueLinked) with Qorum! You should check it out some time.<br/><br/>
        \(feedbackLine)
        Use the \(qorumAppLinked) to learn more and get great deals on your night out.<br/><br/>
        Here's an inside look at \(venueName):
        """
        var attachment: SafeMailSender.Attachment?
        if let image = venueImage {
            attachment = SafeMailSender.Attachment(title: venueName, image: image)
        }
        viewController?.sendEmail(subject: subject,
                                  body: body,
                                  attachment: attachment)
    }
    
    func present(alert: VenueReview.Alert) {
        switch alert {
        case .undefinedVote:
            viewController?.displayAlert(title: "Please give feedback",
                                         message: "At least give a thumbs up or down")
        case .submittingError:
            viewController?.displayAlert(title: "There was a problem submitting your review",
                                         message: "Please try again.")
        case .characterLimitExceeded:
            viewController?.displayAlert(title: "There was a problem submitting your review",
                                         message: "Characters limit exceeded.")
        }
    }
    
    func presentSubmittingLoader() {
        viewController?.showLoader("Sending Review")
    }
    
    func hideLoader() {
        viewController?.hideLoader()
    }
    
    func mayQuit() {
        viewController?.routeBack()
    }
    
}

