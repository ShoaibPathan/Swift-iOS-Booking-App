//
//  VenueReviewViewController.swift
//  Qorum
//
//  Created by Stanislav on 10.12.2017.
//  Copyright (c) 2017 Bizico. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import PINRemoteImage
import FBSDKShareKit
import TwitterKit

protocol VenueReviewDisplayLogic: class {
    
    /// Displays details of the venue to review.
    ///
    /// - Parameters:
    ///   - venueName: The venue title.
    ///   - imageURL: The venue main image URL.
    func display(venueName: String, imageURL: URL?)
    
    /// Updates UI according to current review state.
    ///
    /// - Parameter viewModel: Data Represents current review state.
    func display(viewModel: VenueReview.ViewModel)
    
    /// Displays an alert notifying user about some error or issue.
    ///
    /// - Parameters:
    ///   - title: The title for alert.
    ///   - message: The message for alert.
    func displayAlert(title: String, message: String)
    
    /// Dismisses the view Controller.
    func routeBack()
    
    /// Asks the `QorumProgressHUD` to present loading HUD with given message.
    ///
    /// - Parameter message: The message shown on the HUD. `nil` means no messsage.
    func showLoader(_ message: String?)
    
    /// Asks the `QorumProgressHUD` to dismiss.
    func hideLoader()
    
    /// Presents Facebook sharing dialog.
    ///
    /// - Parameter contentURL: The URL for content to share.
    func shareToFacebook(contentURL: URL)
    
    /// Presents Twitter sharing dialog.
    ///
    /// - Parameters:
    ///   - contentText: The text to share.
    ///   - contentURL: The URL for content to share.
    ///   - contentImage: The image to share.
    func shareToTwitter(contentText: String,
                        contentURL: URL,
                        contentImage: UIImage?)
    
    /// Presents Email composing screen pre-filled with given details.
    ///
    /// - Parameters:
    ///   - subject: The email subject string.
    ///   - body: The email pre-filled text.
    ///   - attachment: The attachment details.
    func sendEmail(subject: String,
                   body: String,
                   attachment: SafeMailSender.Attachment?)
    
}

class VenueReviewViewController: BaseViewController, SBInstantiable, ScrollableInput {
    
    static let storyboardName = StoryboardName.venueDetails
    var interactor: VenueReviewBusinessLogic?
    var router: (NSObjectProtocol & VenueReviewRoutingLogic & VenueReviewDataPassing)?
    
    // MARK: - Outlets
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var venueImageView: UIImageView!
    @IBOutlet weak var venueNameLabel: UILabel!
    @IBOutlet weak var voteContainerImage: UIImageView!
    @IBOutlet weak var likeButton: UIButton!
    @IBOutlet weak var dislikeButton: UIButton!
    @IBOutlet weak var submitButton: UIButton!
    @IBOutlet weak var facebookButton: UIButton!
    @IBOutlet weak var twitterButton: UIButton!
    @IBOutlet weak var emailButton: UIButton!
    @IBOutlet weak var shareContainer: UIStackView!
    @IBOutlet weak var feedbackTextView: UITextView!
    @IBOutlet weak var feedbackPlaceholder: UILabel!
    
    // MARK: - Object lifecycle
    
    deinit {
        NotificationCenter.default.removeObserver(self)
    }
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    private func setup() {
        let viewController = self
        let interactor = VenueReviewInteractor()
        let presenter = VenueReviewPresenter()
        let router = VenueReviewRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    override var backgroundStyle: BaseViewController.BackgroundAppearance {
        return .empty
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configureView()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        addKeyboardObserver()
        interactor?.fetchCheckin()
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        removeKeyboardObserver()
    }
    
    // MARK: - Actions
    
    @IBAction func likeButtonPressed(_ sender: Any) {
        interactor?.action(.tapped(.like))
    }
    
    @IBAction func dislikeButtonPressed(_ sender: Any) {
        interactor?.action(.tapped(.dislike))
    }
    
    @IBAction func facebookButtonPressed(_ sender: Any) {
        interactor?.action(.tapped(.share(.facebook)))
    }
    
    @IBAction func twitterButtonPressed(_ sender: Any) {
        interactor?.action(.tapped(.share(.twitter)))
    }
    
    @IBAction func emailButtonPressed(_ sender: Any) {
        interactor?.action(.tapped(.share(.email)))
    }
    
    @IBAction func submitButtonPressed(_ sender: Any) {
        interactor?.action(.submit(feedback: feedbackTextView?.text ?? ""))
        resignResponder()
    }
    
    // MARK: - ScrollableInput
    
    func inputChanged(_ notification: Notification) {
        update(scrollView: scrollView, with: notification.userInfo)
    }
    
    // MARK: - Internal
    
    private func configureView() {
        voteContainerImage.layer.shadowRadius = 6
        voteContainerImage.layer.shadowColor = UIColor(in8bit: 5, 13, 36).withAlphaComponent(0.15).cgColor
        voteContainerImage.layer.shadowOffset = CGSize(width: 0, height: 20)
        voteContainerImage.layer.shadowOpacity = 1
        feedbackTextView.delegate = self
    }
    
    // MARK: - Gesture Recognizer
    
    @IBAction func resignResponder() {
        feedbackTextView.resignFirstResponder()
    }
    
}

// MARK: - VenueReviewDisplayLogic
extension VenueReviewViewController: VenueReviewDisplayLogic {
    
    func display(venueName: String, imageURL: URL?) {
        venueNameLabel.text = venueName
        venueImageView.pin_setImage(from: imageURL)
    }
    
    func display(viewModel: VenueReview.ViewModel) {
        dislikeButton.isSelected = viewModel.dislikeButtonSelected
        likeButton.isSelected = viewModel.likeButtonSelected
        shareContainer.isHidden = viewModel.shareContainerHidden
        facebookButton.isSelected = viewModel.facebookButtonSelected
        twitterButton.isSelected = viewModel.twitterButtonSelected
        emailButton.isSelected = viewModel.emailButtonSelected
        submitButton.isEnabled = viewModel.submitButtonEnabled
        submitButton.setTitle(viewModel.submitButtonTitle, for: .normal)
    }
    
    func displayAlert(title: String, message: String) {
        UIAlertController.presentAsAlert(title: title, message: message)
    }
    
    func routeBack() {
        router?.routeBack()
    }
    
    func shareToFacebook(contentURL: URL) {
        let content = FBSDKShareLinkContent()
        content.contentURL = contentURL
        let dialog = FBSDKShareDialog()
        dialog.delegate = self
        dialog.fromViewController = self
        dialog.shareContent = content
        dialog.mode = .feedBrowser
        dialog.show()
    }
    
    func shareToTwitter(contentText: String,
                        contentURL: URL,
                        contentImage: UIImage?) {
        let composer = TWTRComposer()
        composer.setText(contentText)
        composer.setURL(contentURL)
        composer.setImage(contentImage)
        composer.show(from: self) { [weak router, weak self] result in
            print(result, result.rawValue)
            self?.dismiss(animated: true, completion: nil)
            router?.routeBack()
        }
    }
    
    func sendEmail(subject: String,
                   body: String,
                   attachment: SafeMailSender.Attachment?) {
        let mailSender = SafeMailSender.shared
        mailSender.delegate = self
        let presentCompletion: (SafeMailSender.Presentation) -> () = { [weak self] presentation in
            switch presentation {
            case .presented:
                self?.hideLoader()
            case .wentToExternalMailApp, .error:
                self?.routeBack()
            }
        }
        mailSender.send(subject: subject,
                        body: body,
                        attachment: attachment,
                        from: self,
                        completion: presentCompletion)
    }
    
}

// MARK: - UITextViewDelegate
extension VenueReviewViewController: UITextViewDelegate {
    
    func textViewDidBeginEditing(_ textView: UITextView) {
        scrollView.scrollRectToVisible(textView.frame, animated: true)
    }
    
    func textViewDidChange(_ textView: UITextView) {
        feedbackPlaceholder.isHidden = textView.text.isNotEmpty
        if textView.text.hasSuffix("\n") {
            textView.text.removeLast()
            textView.resignFirstResponder()
        }
    }
    
}

// MARK: - FBSDKSharingDelegate
extension VenueReviewViewController: FBSDKSharingDelegate {
    
    func sharer(_ sharer: FBSDKSharing!, didCompleteWithResults results: [AnyHashable : Any]!) {
        routeBack()
    }
    
    func sharer(_ sharer: FBSDKSharing!, didFailWithError error: Error!) {
        displayAlert(title: "Share via Facebook",
                     message: "There was a problem sharing your review")
        routeBack()
    }
    
    func sharerDidCancel(_ sharer: FBSDKSharing!) {
        routeBack()
    }
    
}

// MARK: - SafeMailSenderDelegate
extension VenueReviewViewController: SafeMailSenderDelegate {
    
    func safeMailSenderDidFinish(with result: SafeMailSender.Result) {
        routeBack()
    }
    
}
