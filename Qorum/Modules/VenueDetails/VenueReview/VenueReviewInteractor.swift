//
//  VenueReviewInteractor.swift
//  Qorum
//
//  Created by Stanislav on 10.12.2017.
//  Copyright (c) 2017 Bizico. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

protocol VenueReviewBusinessLogic {
    
    /// Fetches the checkin associated with venue to review.
    func fetchCheckin()
    
    /// Processes passed user interaction.
    ///
    /// - Parameter action: The action taken by user.
    func action(_ action: VenueReview.Action)
    
}

protocol VenueReviewDataStore {
    var checkin: Checkin? { get set }
    var voteModel: VenueReview.VoteModel { get set }
}

class VenueReviewInteractor: VenueReviewDataStore {
    var presenter: VenueReviewPresenter?
    private(set) lazy var worker = VenueReviewWorker()
    private(set) lazy var venueWorker = VenueDetailsWorker()
    var checkin: Checkin?
    var voteModel: VenueReview.VoteModel = .undefinedVote
}

// MARK: - VenueReviewBusinessLogic
extension VenueReviewInteractor: VenueReviewBusinessLogic {
    
    func fetchCheckin() {
        if let checkin = checkin {
            presenter?.present(checkin: checkin)
        }
        presenter?.present(voteModel: voteModel)
    }
    
    func action(_ action: VenueReview.Action) {
        switch action {
        case .tapped(let vote):
            switch vote {
            case .share(let shareType) where voteModel == .vote(.share(shareType)):
                voteModel = .vote(.like)
            default:
                voteModel = .vote(vote)
            }
            presenter?.present(voteModel: voteModel)
        case .submit(let feedback):
            guard let checkin = checkin else {
                presenter?.mayQuit()
                return
            }
            if voteModel == .undefinedVote {
                presenter?.present(alert: .undefinedVote)
                return
            }
            if feedback.count >= VenueReview.kReviewCharactersLimit {
                presenter?.present(alert: .characterLimitExceeded)
                return
            }
            if feedback.isNotEmpty {
                checkin.feedback = feedback
            }
            checkin.rating = voteModel.rating
            worker.trackReview(of: checkin)
            presenter?.presentSubmittingLoader()
            worker.leaveReview(checkin: checkin) { [weak self] result in
                guard let self = self else { return }
                switch result {
                case .value:
                    QorumNotification.needsFreeRideCheckinsUpdate.post()
                    if let shareType = self.voteModel.shareType {
                        if shareType != .email {
                            self.presenter?.hideLoader()
                        }
                        self.share(shareType: shareType)
                    } else {
                        self.presenter?.hideLoader()
                        self.presenter?.mayQuit()
                    }
                case let .error(error):
                    print("\(type(of: self)) submitting error:\n\(error)")
                    self.presenter?.hideLoader()
                    self.presenter?.present(alert: .submittingError)
                }
            }
        }
    }
    
}

// MARK: - Sharing
extension VenueReviewInteractor {
    
    func share(shareType: VenueReview.ShareType) {
        guard
            let checkin = checkin,
            let venue = checkin.venue,
            let appInviteURL = User.stored.branchLink?.url else
        {
            presenter?.mayQuit()
            return
        }
        var venueImage: UIImage? {
            guard
                let imageUrl = venue.main_photo_url?.url,
                let data = try? Data(contentsOf: imageUrl) else { return nil }
            return UIImage(data: data)
        }
        switch shareType {
        case .facebook:
            presenter?.presentFacebookSharing(appInviteURL: appInviteURL)
        case .twitter:
            let venueLink = venue.twitterHandle ?? venue.name
            presenter?.presentTwitterSharing(appInviteURL: appInviteURL,
                                             venueLink: venueLink,
                                             feedback: checkin.feedback,
                                             venueImage: venueImage)
        case .email:
            venueWorker.getShareLink(for: venue) { [weak presenter] result in
                let venueLink: String?
                switch result {
                case let .value(link):
                    venueLink = link
                case let .error(error):
                    print("venueWorker.getShareLink error:\n\(error)")
                    venueLink = nil
                }
                presenter?.presentEmailSharing(appInviteURL: appInviteURL,
                                               venueName: venue.name,
                                               venueLink: venueLink,
                                               feedback: checkin.feedback,
                                               venueImage: venueImage)
            }
        }
    }
    
}

