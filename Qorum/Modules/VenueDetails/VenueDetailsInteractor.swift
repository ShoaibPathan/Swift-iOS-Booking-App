//
//  VenueDetailsInteractor.swift
//  Qorum
//
//  Created by Dima Tsurkan on 11/16/17.
//  Copyright (c) 2017 Bizico. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Mixpanel

protocol VenueDetailsBusinessLogic {
    
    /// Checks preconditions before ask Qorum server to open a tab.
    func checkPreconditions()
    
    /// Fetches last checkins after user logged in.
    func fetchLastCheckins()
    
    /// Loads user friends and detects ones who is checked in this venue
    /// to present them in the `FriendsContainerController`.
    ///
    /// - Parameter completion: completion handler closure.
    func loadFriends(completion: @escaping APIHandler<[FBFriend]>)
    
    /// Asks the Qorum server to open a tab in this venue.
    ///
    /// - Parameter request: Specifies the venue to open a tab in.
    func openNewCheckIn(request: VenueDetails.CheckIn.Request)
    
    /// Asks the Uber server to estimate the route and price to given venue from user location.
    /// If user location is missing, will return no estimates.
    ///
    /// - Parameters:
    ///   - venue: The bar you want to get the estimates to.
    ///   - handler: The handler closure with estimation result.
    func getPriceEstimate(_ venue:Venue, handler: @escaping (_ success:Bool, _ estimates:[UberEstimate]) -> ())
    
    /// Logs user in with Facebook when in guest mode.
    func login()
    
    /// Will ask the presenter to present appropriate overlay if conditions are met.
    func mayShowOverlay()
    
    /// Asks the worker to get sharing data for the venue and present sharing sheet view.
    ///
    /// - Parameter viewController: Used to present sharing sheet view on
    func share(from viewController: UIViewController)
    
}

protocol VenueDetailsDataStore {
    
    /// The venue this scene represents
    var venue: Venue? { get set }
    
    /// The `Checkin` data to be passed to the `Bill` scene after opening a tab.
    var checkin: Checkin? { get set }
    
}

class VenueDetailsInteractor: VenueDetailsBusinessLogic, VenueDetailsDataStore {
    
    var presenter: VenueDetailsPresentationLogic?
    
    /// The presenter used for logging in when in guest mode.
    /// Expected to be the `VenueDetailsPresenter`.
    var authPresenter: AuthPresentationLogic?
    
    private(set) lazy var worker = VenueDetailsWorker()
    var venue: Venue?
    var checkin: Checkin?
    
    /// The interactor used for logging in when in guest mode.
    private(set) lazy var authInteractor: AuthInteractor = {
        let interactor = AuthInteractor()
        interactor.presenter = authPresenter
        return interactor
    }()
    
    deinit {
        NotificationCenter.default.removeObserver(self)
    }
    
    // MARK: - Preconditions
    
    func checkPreconditions() {
        worker.checkPreconditions(venue: venue!, success: {
            self.presenter?.presentPreconditionsSuccess()
        }, failure: { (cases) in
            let response = VenueDetails.Preconditions(preconditionCases: cases)
            self.presenter?.presentPreconditionsError(response: response)
        })
    }
    
    func fetchLastCheckins() {
        if User.stored.isGuest { return }
        let venuesWorker = VenuesWorker()
        venuesWorker.loadLastCheckins(userId: User.stored.userId) { [weak presenter] in
            presenter?.presentLoadedCheckins()
        }
        venuesWorker.loadCheckinsWithFreeUber()
    }
    
    //MARK: - FaceBook
    
    func login() {
        authInteractor.loginWithFacebook()
    }
    
    func loadFriends(completion: @escaping APIHandler<[FBFriend]>) {
        let storedUser = User.stored
        guard !storedUser.isGuest else {
            completion(.error("Guest can't have any friends"))
            return
        }
        guard storedUser.facebookFriends.isEmpty else {
            print(storedUser.facebookFriends)
            completion(.value(storedUser.facebookFriends))
            return
        }
        FBFriend.fetch { (result) in
            switch result {
            case let .value(friends):
                storedUser.facebookFriends = friends
                storedUser.save()
                completion(.value(friends))
            case let .error(error):
                completion(.error(error))
            }
        }
    }
    
    // MARK: - CheckIn
    func openNewCheckIn(request: VenueDetails.CheckIn.Request) {
        worker.openNewCheckIn(venueId: venue!.venue_id, successHandler: { checkin in
            self.checkin = checkin
            let response = VenueDetails.CheckIn.Response(checkin: checkin, checkinError: nil)
            self.presenter?.presentCheckin(response: response)
            AnalyticsService.shared.track(event: MixpanelEvents.tabOpen.rawValue,
                                          properties: ["Venue":self.venue!.name,
                                                       "Tab Open Method": "Manually Tap Open Tab Button",
                                                       "Discount": self.venue!.discountValue,
                                                       "Market":self.venue?.market?.name ?? "",
                                                       "Neighborhood":self.venue!.neighborhood ?? ""])
        }, failureHandler: { (errorDict) in
            let response = VenueDetails.CheckIn.Response(checkin: nil, checkinError: errorDict)
            self.presenter?.presentCheckinError(response: response)
        })
    }
    
    // MARK: - Uber estimates
    func getPriceEstimate(_ venue:Venue, handler:@escaping (_ success:Bool, _ estimates:[UberEstimate]) -> ()) {
        if let user_coordinates = LocationService.shared.location?.coordinate {
            worker.getPriceEstimate(from: user_coordinates, to: venue.coordinate) { (success, estimates) in
                handler(success, estimates)
            }
        } else {
            handler(false, [])
        }
    }
    
    func mayShowOverlay() {
        let user = User.stored
        guard let venue = venue else { return }
        if user.isGuest && !UserDefaults.standard.bool(for: .didShowFacebookOverlayKey) {
            UserDefaults.standard.set(true, for: .didShowFacebookOverlayKey)
            presenter?.presentOverlay(.facebook)
        } else if !user.isGuest && !LocationService.shared.tooFarForCheckin(venue.coordinate) {
            presenter?.presentOverlay(.openBar)
        }
    }
    
    func share(from viewController: UIViewController) {
        guard let venue = venue else { return }
        worker.presentShareSheet(for: venue, from: viewController)
    }
    
}
