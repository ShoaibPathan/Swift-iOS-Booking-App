//
//  VenueDetailsWorker.swift
//  Qorum
//
//  Created by Dima Tsurkan on 11/16/17.
//  Copyright (c) 2017 Bizico. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Moya
import SwiftyJSON
import FBSDKCoreKit
import Branch
import SwiftyBeaver

/// The worker for the `VenueDetails` module.
class VenueDetailsWorker {
    
    /// Returns the stored user.
    var user: User {
        return User.stored
    }
    
    /// Checks preconditions to open a tab in given venue.
    ///
    /// - Parameters:
    ///   - venue: The venue to check preconditions against.
    ///   - success: The success handler closure.
    ///   - failure: The failure handler closure.
    func checkPreconditions(venue: Venue, success: @escaping () -> Void, failure: @escaping ([String: String]) -> Void) {
        var cases: [String: String] = [:]
        
        if !checkUserIsAuthorized() {
            cases["auth"] = "Not authorized"
        }
        if !checkWorkingHours(venue) {
            cases["working_hours"] = "\(venue.name) is closed"
        }
        
        checkPaymentCardAdded { result in
            switch result {
            case .value:
                guard cases.isEmpty else {
                    failure(cases)
                    return
                }
                success()
            case let .error(error):
                print(error)
                cases["payment_card"] = "Payment card is missing"
                failure(cases)
            }
        }
    }
    
    /// Opens a tab in the venue with given identifier.
    ///
    /// - Parameters:
    ///   - venueId: The identifier of the venue to open a tab in.
    ///   - successHandler: The success handler closure.
    ///   - failureHandler: The failure handler closure.
    func openNewCheckIn(venueId: Int,
                        successHandler: @escaping (Checkin) -> Void,
                        failureHandler: @escaping ([String: Any]) -> Void) {
        let request = AuthenticatedRequest(target: .openCheckin(userId: user.userId, venueId: venueId))
        SwiftyBeaver.debug(request.target.endpointDescription)
        request.performDecoding(for: "checkin") { (checkinResult: APIResult<Checkin>) in
            switch checkinResult {
            case let .value(checkin):
                AppDelegate.shared.checkinHash.updateValue(checkin, forKey: venueId)
                UserDefaults.standard.set(true, for: .hasActiveCheckin)
                UserDefaults.standard.set(checkin.checkin_id, forKey: UserDefaultsKeys.activeCheckinId.rawValue)
                UserDefaults.standard.set(checkin.venue?.venue_id ?? 0, forKey: UserDefaultsKeys.activeCheckinVenueId.rawValue)
                QorumNotification.checkedIn.post()
                print("Did checkin: \(checkin.checkin_id), patron: \(checkin.patron_id?.description ?? "nil")")
                successHandler(checkin)
            case let .error(error):
                // TODO: check error handling @sshemiakov
                failureHandler(["error_description": error])
            }
        }
    }
    
    /// Just a convenience wrapper on `getShareLink` method.
    ///
    /// - Parameters:
    ///   - venue: The venue to get the object from.
    ///   - completion: The completion handler closure.
    func getShareLink(for venue: Venue,
                      completion: @escaping APIHandler<String>) {
        getShareLink(from: getBranchObject(for: venue),
                     with: getBranchLinkModel(for: venue),
                     completion: completion)
    }
    
    /// Presents a share sheet after generating share link for given venue.
    ///
    /// - Parameters:
    ///   - venue: The venue to share with in the sheet.
    ///   - viewController: The `UIViewController` to present the share sheet from.
    func presentShareSheet(for venue: Venue,
                           from viewController: UIViewController) {
        let branchObj = getBranchObject(for: venue)
        let branchLinkModel = getBranchLinkModel(for: venue)
        getShareLink(from: branchObj, with: branchLinkModel) { result in
            switch result {
            case .value:
                let message = "Check out \(venue.name) with Qorum"
                branchObj.showShareSheet(with: branchLinkModel, andShareText: message, from: viewController) { activityType, _ in
                    print("branchObj showShareSheet - activityType:", activityType ?? "nil")
                }
            case let .error(error):
                print("branchObj getShortUrl - error:", error)
                if AppConfig.developerModeEnabled {
                    UIAlertController.presentAsAlert(title: "presentShareSheet - getShareLink error:",
                                                     message: "\(error)")
                }
            }
        }
    }
    
    // MARK: - Internal
    
    /// Gets the `BranchUniversalObject` from given venue.
    /// Used for getting the share link.
    ///
    /// - Parameter venue: The venue to get the object from.
    /// - Returns: A Branch universal object.
    private func getBranchObject(for venue: Venue) -> BranchUniversalObject {
        // required: canonicalIdentifier or title
        // recommended: title, contentDescription, imageUrl for social media cards
        let branchObj = BranchUniversalObject(canonicalIdentifier: "venue/\(venue.venue_id)")
        branchObj.canonicalUrl = "https://qorum.com/"
        branchObj.title = venue.name
        if let venueType = venue.venue_type?.capitalized {
            branchObj.contentDescription = venueType
        }
        if let photoLink = venue.main_photo_url {
            branchObj.imageUrl = photoLink
        }
        
        // index on Apple Spotlight
        branchObj.locallyIndex = true
        // index on Google, Branch, etc
        branchObj.publiclyIndex = true
        
        // additional object details
        branchObj.contentMetadata.contentSchema = .commerceRestaurant
        if let city = venue.city {
            branchObj.contentMetadata.addressCity = city
        }
        if let zip = venue.zip {
            branchObj.contentMetadata.addressPostalCode = zip
        }
        branchObj.contentMetadata.latitude = venue.coordinate.latitude
        branchObj.contentMetadata.longitude = venue.coordinate.longitude
        return branchObj
    }
    
    /// Gets the `BranchLinkProperties` from given venue.
    /// Used for getting the share link.
    ///
    /// - Parameter venue: The venue to get the model from.
    /// - Returns: A Branch link properties object.
    private func getBranchLinkModel(for venue: Venue) -> BranchLinkProperties {
        let linkModel = BranchLinkProperties()
        let qorumCom = "http://qorum.com"
        linkModel.addControlParam("$desktop_url", withValue: qorumCom)
        linkModel.addControlParam("$ios_url", withValue: qorumCom)
        linkModel.addControlParam("$ipad_url", withValue: qorumCom)
        linkModel.addControlParam("$android_url", withValue: qorumCom)
        linkModel.addControlParam("venue_id", withValue: "\(venue.venue_id)")
        return linkModel
    }
    
    /// Fetches the share link value from given `BranchUniversalObject` with `BranchLinkProperties`.
    ///
    /// - Parameters:
    ///   - branchObj: The `BranchUniversalObject` object to get a link from.
    ///   - branchLinkModel: The `BranchLinkProperties` object to get a link from
    ///   - completion: The completion handler closure.
    private func getShareLink(from branchObj: BranchUniversalObject,
                      with branchLinkModel: BranchLinkProperties,
                      completion: @escaping APIHandler<String>) {
        branchObj.getShortUrl(with: branchLinkModel) { (url, error) in
            if let link = url {
                completion(.value(link))
            } else if let error = error {
                completion(.error(error))
            } else {
                completion(.error("Unexpected error!"))
            }
        }
    }
    
    /// Fetches the payment cards `[CreditCard]` using `PaymentsWorker`.
    /// Used to check payment precondition.
    ///
    /// - Parameter completion: The completion handler closure.
    private func fetchPaymentCards(completion: @escaping APIHandler<[CreditCard]>) {
        PaymentsWorker().fetchPaymentCards(completion: completion)
    }
    
    /// - Returns: Whether user is not a guest.
    private func checkUserIsAuthorized() -> Bool {
        return !user.isGuest
    }
    
    /// Checks status of given venue
    /// Used to check venue status precondition.
    ///
    /// - Parameter venue: The venue to check status of.
    /// - Returns: `true` if the venue is open now.
    private func checkWorkingHours(_ venue: Venue) -> Bool {
        switch venue.status() {
        case .open, .closesSoon:
            return true
        case .opensLater, .closed:
            return false
        }
    }
    
    /// Checks whether user has added valid payment card.
    /// Used to check payment precondition.
    ///
    /// - Parameter completion: The completion handler closure.
    private func checkPaymentCardAdded(completion: @escaping APIHandler<Void>)  {
        fetchPaymentCards { (result) in
            switch result {
            case let .value(cards):
                debugPrint(cards)
                guard cards.isNotEmpty else {
                    completion(.error("No cards found"))
                    return
                }
                guard let defaultCard = cards.first(where: { $0.isDefault }) else {
                    completion(.error("No default credit card"))
                    return
                }
                guard !defaultCard.isExpired else {
                    completion(.error("Your default credit card is expired"))
                    return
                }
                completion(.success)
            case let .error(error):
                completion(.error(error))
            }
        }
    }
    
    // MARK: - Uber estimates
    
    /// Estimates the Uber price for a route with given start and finish locations.
    ///
    /// - Parameters:
    ///   - startLocation: Pickup location of the estimated route.
    ///   - finishLocation: Dropoff location of the estimated route.
    ///   - handler: The handler closure.
    func getPriceEstimate(from startLocation: CLLocationCoordinate2D,
                          to finishLocation: CLLocationCoordinate2D,
                          handler: @escaping (_ success: Bool, _ estimates: [UberEstimate]) -> ()) {
        let request = UberRequest(target: .estimatePrice(startLocation: startLocation, finishLocation: finishLocation))
        request.perform { response in
            switch response.result {
            case let .value(json):
                var estimates: [UberEstimate] = []
                for (_, estimate_json) in json["prices"] {
                    let estimate = UberEstimate.safelyFrom(json: estimate_json)
                    if estimate.product_id.count > 0 {
                        estimates.append(estimate)
                    }
                }
                handler(true, estimates)
            case let .error(error):
                print("VenueDetailsWorker getPriceEstimate error:", error)
                handler(false, [])
            }
        }
    }
    
}
