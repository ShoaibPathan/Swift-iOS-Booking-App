//
//  SearchViewController.swift
//  Qorum
//
//  Created by Stanislav on 31.01.2018.
//  Copyright (c) 2018 Bizico. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Mixpanel

protocol SearchDisplayLogic: class {
    
}

class SearchViewController: BaseViewController, SBInstantiable, ScrollableInput {
    
    static let storyboardName = StoryboardName.search
    var interactor: SearchBusinessLogic?
    var router: (NSObjectProtocol & SearchRoutingLogic & SearchDataPassing)?
    weak var venuesController: QorumSearchBarDelegate?
    
    // available cities
    var vendorCities: [VendorCity] = [] {
        didSet {
            tableView.reloadData()
        }
    }
    
    // MARK: - Outlets
    @IBOutlet weak var searchBar: QorumSearchBar!
    @IBOutlet weak var tableView: UITableView!
    
    // MARK: - Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    private func setup() {
        modalPresentationStyle = .custom
        modalTransitionStyle = .crossDissolve
        modalPresentationCapturesStatusBarAppearance = true
        let viewController = self
        let interactor = SearchInteractor()
        let presenter = SearchPresenter()
        let router = SearchRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        searchBar.locationButton.isHidden = true
        searchBar.delegate = self
        tableView.dataSource = self
        tableView.delegate = self
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        addKeyboardObserver()
        vendorCities = CityManager.shared.sortedCities
        QorumNotification.citiesLoaded.add(observer: self, selector: #selector(citiesLoaded))
        searchBar.textField.becomeFirstResponder()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        searchBar.textField.resignFirstResponder()
        removeKeyboardObserver()
        QorumNotification.citiesLoaded.remove(observer: self)
    }
    
    // MARK: - ScrollableInput
    
    @objc func inputChanged(_ notification: Notification) {
        update(scrollView: tableView as UIScrollView, with: notification.userInfo)
    }
    
    // MARK: - Actions
    
    @objc func citiesLoaded() {
        updateCities(searchText: searchBar.text)
    }
    
    @IBAction func profileButtonPressed(_ sender: Any) {
        router?.routeToProfile()
    }
    
    // MARK: - Misc
    
    /// Updates list of cities suggestions
    ///
    /// - Parameter searchText: contained substring to match the cities
    fileprivate func updateCities(searchText: String) {
        let allCities = CityManager.shared.sortedCities
        if searchText.isEmpty {
            vendorCities = allCities
        } else {
            vendorCities = allCities.filter {
                $0.name.localizedCaseInsensitiveContains(searchText)
            }
        }
    }
    
}

// MARK: - SearchDisplayLogic
extension SearchViewController: SearchDisplayLogic {
    
}

// MARK: - UITableViewDataSource
extension SearchViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return max(1, vendorCities.count)
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "SearchResultCell")!
        if vendorCities.isEmpty {
            cell.textLabel?.text = "Sorry, no results!"
        } else if indexPath.row >= vendorCities.count {
            cell.textLabel?.text = ""
        } else {
            let vendorCity = vendorCities[indexPath.row]
            cell.textLabel?.text = vendorCity.name
        }
        return cell
    }
    
}

// MARK: - UITableViewDelegate
extension SearchViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        guard indexPath.row < vendorCities.count else { return }
        let vendorCity = vendorCities[indexPath.row]
        if vendorCity != CityManager.shared.selectedCity {
            CityManager.shared.selectedCity = vendorCity
            // AnalyticsService.shared.track(event: MixpanelEvents.searchLocation.rawValue, properties: ["Search Query": vendorCity.name])
        }
        router?.routeBack()
    }
    
}

// MARK: - QorumSearchBarDelegate
extension SearchViewController: QorumSearchBarDelegate {
    
    func searchBarCancelButtonClicked(_ searchBar: QorumSearchBar) {
        router?.routeBack()
    }
    
    func searchBar(_ searchBar: QorumSearchBar, textDidChange searchText: String) {
        updateCities(searchText: searchText)
    }
    
    func searchBarLocationButtonClicked(_ searchBar: QorumSearchBar) {
        venuesController?.searchBarLocationButtonClicked?(searchBar)
    }
    
}

