//
//  PaymentsViewController.swift
//  Qorum
//
//  Created by Dima Tsurkan on 11/27/17.
//  Copyright (c) 2017 Bizico. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PaymentsDisplayLogic: class {
    
    /// Displays user's credit cards
    ///
    /// - Parameter viewModel: state model
    func displayFetchedPaymentCards(viewModel: Payments.ViewModel)
    
    /// Displays Loading process
    ///
    /// - Parameter loadingState: state model
    func display(loadingState: Payments.LoadingState)
    
    /// Displays alert
    ///
    /// - Parameters:
    ///   - title: alert title
    ///   - message: alert text
    func display(title: String?, message: String?)
}

class PaymentsViewController: BaseViewController, SBInstantiable {
    
    static let storyboardName = StoryboardName.profile
    var interactor: PaymentsBusinessLogic?
    var router: (NSObjectProtocol & PaymentsRoutingLogic & PaymentsDataPassing)?
    var cards: [CreditCard] = []
    
    // MARK: - IBOutlets
    @IBOutlet weak var tableView: UITableView!
    
    let refreshHeader = RefreshHeaderView()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = PaymentsInteractor()
        let presenter = PaymentsPresenter()
        let router = PaymentsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configureView()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        loadPayments()
    }
    
    // MARK: - Actions
    
    @IBAction func backButtonPressed(_ sender: Any) {
        router?.routeBack()
    }
    
    @IBAction func addButtonPressed(_ sender: Any) {
        router?.routeToAddNewPaymentMethod()
    }
    
    // MARK: - Internal
    
    private func configureView() {
        configureTableView()
    }
    
    /// Configures tableView
    private func configureTableView() {
        tableView.alwaysBounceVertical = true
        tableView.dataSource = self
        tableView.delegate = self
        configureRefreshControl()
    }
    
    /// Configures pull-to-refresh
    private func configureRefreshControl() {
        refreshHeader.add(to: tableView,
                          addingTarget: self,
                          action: #selector(loadPayments),
                          blocksOnRefresh: tableView)
    }
    
    @objc private func loadPayments() {
        interactor?.action(request: .fetchCards)
    }
    
}

// MARK: - PaymentsDisplayLogic
extension PaymentsViewController: PaymentsDisplayLogic {
    
    func displayFetchedPaymentCards(viewModel: Payments.ViewModel) {
        self.cards = viewModel.cards
        tableView.reloadData()
        display(loadingState: .finished)
    }
    
    func display(loadingState: Payments.LoadingState) {
        switch loadingState {
        case .started:
            refreshHeader.startAnimating()
        case .finished:
            refreshHeader.stopAnimating()
        }
    }
    
    func display(title: String?, message: String?) {
        UIAlertController.presentAsAlert(title: title, message: message)
    }
    
}

// MARK: - UITableViewDataSource
extension PaymentsViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return cards.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "PaymentCell") as! PaymentCell
        let card = cards[indexPath.row]
        let imageName = card.brand.lowercased().replacingOccurrences(of: " ", with: "") + "_card"
        cell.cardNumber = "••••  ••••  ••••  \(card.last4)"
        cell.cardImage = UIImage(named: imageName)
        
        cell.isCardDefault = card.isDefault
        return cell
    }
    
}

// MARK: - UITableViewDelegate
extension PaymentsViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        // TODO: - add ApplePay support
        let card = cards[indexPath.row]
        guard !card.isDefault else { return }
        interactor?.action(request: .setDefaultPayment(.card(card)))
    }
    
    func tableView(_ tableView: UITableView, editActionsForRowAt indexPath: IndexPath) -> [UITableViewRowAction]? {
        let deleteAction = UITableViewRowAction(style: .destructive, title: "DELETE") { [unowned self] (action, indexPath) in
            self.tableView.isEditing = false
            let card = self.cards[indexPath.row]
            self.interactor?.action(request: .deleteCard(card))
            self.cards.remove(at: indexPath.row)
            self.tableView.reloadData()
        }
        deleteAction.backgroundColor = UIColor(in8bit: 255, 0, 45)
        return [deleteAction]
    }
    
}

