//
//  SettingsInteractor.swift
//  Qorum
//
//  Created by Stanislav on 02.05.2018.
//  Copyright (c) 2018 Bizico. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SettingsBusinessLogic: AnyObject {
    func update(_ request: Settings.Request)
    func revealDeveloperOptions()
}

protocol SettingsDataStore { }

class SettingsInteractor: SettingsDataStore {
    var presenter: SettingsPresentationLogic?
    private(set) lazy var worker = SettingsWorker()
    private(set) lazy var profileWorker = ProfileWorker()
    
    var developerModeOptionsRevealed = false {
        didSet {
            update(.items)
        }
    }
    
    /**
     * Switches Facebook visability. If On user will visible for his Facebook
     * friends on Venue Details Page during visiting a venue. 
     * Parameter:
     * isOn - bool value for visibility
     */
    func fbVisibilitySwitchChanged(isOn: Bool) {
        guard isOn else {
            let title = "Turn off Facebook Visibility?"
            let message = "After turning off Facebook visibility, you must wait 24 hours after turning it back on before you can \"See who's there\" again."
            let okAction: UIAlertController.CustomAction
            okAction = ("OK", .default, { [weak self] in
                self?.visibilityUpdateRequest(visible: false)
            })
            let cancelAction: UIAlertController.CustomAction
            cancelAction = ("Cancel", .cancel, { [weak self] in
                self?.update(.items)
            })
            UIAlertController.presentAsAlert(title: title,
                                             message: message,
                                             actions: [okAction, cancelAction])
            return
        }
        let now = Date()
        guard
            let visibleSince = User.stored.facebookOnFrom,
            visibleSince.compare(now) != .orderedAscending,
            User.stored.facebookVisible == "limbo" else
        {
            visibilityUpdateRequest(visible: true)
            return
        }
        let secondsLeft = visibleSince.timeIntervalSinceNow
        let hoursLeft = Time(secondsLeft, .seconds).converted(to: .hours)
        let hours = Int(ceil(hoursLeft))
        presenter?.present(response: .visibilityLimboHoursLeft(hours))
    }
    
    /**
     * Updates Facebook visability status on server.
     * Parameter:
     * visible - bool value for visibility
     */
    func visibilityUpdateRequest(visible: Bool) {
        let storedUser = User.stored
        guard !storedUser.isGuest else {
            print("visibilityUpdateRequest error: can't set visibility for guest")
            return
        }
        presenter?.present(response: .startLoading)
        let state = visible ? "on" : "off"
        worker.visibilityUpdateRequest(state: state, user: storedUser) { [weak self] result in
            self?.presenter?.present(response: .finishLoading)
            self?.update(.items)
            switch result {
            case let .value(user):
                guard
                    let visibleSince = user.facebookOnFrom,
                    user.facebookVisible == "limbo" else { return }
                let secondsLeft = visibleSince.timeIntervalSinceNow
                let hoursLeft = Time(secondsLeft, .seconds).converted(to: .hours)
                let hours = Int(ceil(hoursLeft))
                self?.presenter?.present(response: .visibilityLimboHoursLeft(hours))
            case let .error(error):
                print("SeetingsWorker visibilityUpdateRequest error:\n\(error)")
            }
        }
    }
    
    /**
     * Logs in Twitter or logs out of it.
     * Parameter:
     * isOn - bool value for Twitter login/logout flow
     */
    func twitterLoginSwitchChanged(isOn: Bool) {
        if isOn {
            twitterLoginRequest()
        } else {
            twitterLogoutRequest()
        }
    }
    
    /**
     * Logins on Twitter account.
     */
    func twitterLoginRequest() {
        worker.loginTwitterRequest { [weak self] (result) in
            switch result {
            case .value:
                break
            case let .error(error):
                print("SeetingsWorker twitterLoginRequest error:\n\(error)")
            }
            self?.update(.items)
        }
    }
    
    /**
     * Logouts from Twitter account.
     */
    func twitterLogoutRequest() {
        worker.logoutTwitterRequest()
        update(.items)
    }
    
}

// MARK: - SettingsBusinessLogic
extension SettingsInteractor: SettingsBusinessLogic {
    
    func update(_ request: Settings.Request) {
        switch request {
        case .version:
            let buildVersion = Bundle.main.infoDictionary!["CFBundleVersion"] as? String
            presenter?.present(response: .version(environment: AppConfig.environment.path.title,
                                                  build: buildVersion ?? ""))
        case .items:
            let defaults = UserDefaults.standard
            let isFBVisible = User.stored.isFacebookVisible
            let autoOpenTab = defaults.bool(for: .autoOpenTabKey)
            let twitterState = worker.getTwitterState()
            presenter?.present(response: .settingsState(.init(isFBVisible: isFBVisible,
                                                              autoOpenTab: autoOpenTab,
                                                              twitterState: twitterState)))
        case .visibility(let visible):
            fbVisibilitySwitchChanged(isOn: visible)
            
        case .twitter(let isOn):
            twitterLoginSwitchChanged(isOn: isOn)
        }
    }
    
    func revealDeveloperOptions() {
        developerModeOptionsRevealed = true
    }
    
}

