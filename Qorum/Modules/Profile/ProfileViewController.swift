//
//  ProfileViewController.swift
//  Qorum
//
//  Created by Dima Tsurkan on 10/3/17.
//  Copyright (c) 2017 Bizico. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Photos
import AVKit
import PINRemoteImage

protocol ProfileDisplayLogic: class {
    
    /// Displays current state
    ///
    /// - Parameter viewModel: state model
    func display(viewModel: Profile.ViewModel)
}

class ProfileViewController: BaseViewController, SBInstantiable {
    
    static let storyboardName = StoryboardName.profile
    var interactor: ProfileBusinessLogic?
    var router: (NSObjectProtocol & ProfileRoutingLogic & ProfileDataPassing)?
    
    // MARK: - Outlets
    @IBOutlet private weak var placeholderImageView: UIImageView!
    @IBOutlet private weak var profileImageView: UIImageView!
    @IBOutlet private weak var photoButton: UIButton!
    @IBOutlet private weak var userNameLabel: UILabel!
    @IBOutlet private weak var userSavedLabel: UILabel!
    @IBOutlet private weak var userSavedAmountLabel: UILabel!
    @IBOutlet private weak var tableView: UITableView!
    @IBOutlet weak var verifyContainer: UIStackView!
    @IBOutlet weak var verifyPhoneButton: UIButton!
    @IBOutlet weak var verifyEmailButton: UIButton!
    
    // free_drinks_disabled
    // let profileMenuItems = ["Account", "Free drinks", "24/7 Support", "Payment", "Settings"]
    
    let profileMenuItems = ["Account", "24/7 Support", "Payment", "Settings"]

    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: - Setup
    
    private func setup() {
        let viewController = self
        let interactor = ProfileInteractor()
        let presenter = ProfilePresenter()
        let router = ProfileRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        tableView.dataSource = self
        tableView.delegate = self
        interactor?.fetch(.user(localOnly: false))
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.isNavigationBarHidden = true
        interactor?.fetch(.user(localOnly: true))
    }
    
    // MARK: - Actions
    
    @IBAction func backButtonPressed(_ sender: Any) {
        router?.routeBack()
    }
    
    @IBAction func photoButtonPressed(_ sender: Any) {
        PHPhotoLibrary.requestAuthorization { [weak self] _ in
            AVCaptureDevice.requestAccess(for: .video) { [weak self] _ in
                DispatchQueue.main.async {
                    self?.presentPhotoActionSheet()
                }
            }
        }
    }
    
    /// Opens source for media.
    func presentPhotoActionSheet() {
        let message = "Add a new profile photo"
        var actions: [(String, UIAlertActionStyle, (() -> ())?)] = []
        actions.append(("Import from Facebook", .default, { [weak self] in self?.interactor?.fetch(.facebookImage) }))
        actions.append(("Choose from library", .default, { [weak self] in self?.userCameraRoll() }))
        if UIImagePickerController.isCameraDeviceAvailable(.front) {
            actions.append(("Take a photo", .default, { [weak self] in self?.takePhoto() }))
        }
        actions.append(("Cancel", .cancel, .none))
        UIAlertController.presentAsActionSheet(message: message, from: self, actions: actions)
    }
    
    @IBAction private func logout() {
        if let activeCheckinId = AppDelegate.shared.checkinHash.values.first(where: { $0.checkout_time == nil })?.checkin_id {
            let closeAndlogOut: UIAlertController.CustomAction
            closeAndlogOut = ("Close Tab and Log Out", .destructive, { [weak interactor] in
                interactor?.checkout(checkinId: activeCheckinId)
            })
            UIAlertController.presentAsAlert(title: "WARNING: Logging out will automatically close your current tab.",
                                             message: "If you are eligible for a free Uber Ride (up to $10 max), then you will need to log back into Qorum to redeem it.",
                                             actions: [("Cancel", .cancel, nil), closeAndlogOut])
        } else {
            UIAlertController.presentAsActionSheet(from: self, actions:
                [("Log Out", .destructive, { [weak interactor] in interactor?.logoutUser() }),
                 ("Cancel", .cancel, nil)])
        }
    }
    
    @IBAction func verifyPhoneButtonPressed(_ sender: Any) {
        router?.routeToPhoneVerification()
    }
    
    @IBAction func verifyEmailButtonPressed(_ sender: Any) {
        router?.routeToEmailVerification()
    }
    
    // MARK: - Internal
    
    /// Opens Library to select a photo.
    /// In case of denied permisions presents alert.
    private func userCameraRoll() {
        if PHPhotoLibrary.authorizationStatus() == .authorized {
            let pickerController = UIImagePickerController()
            pickerController.delegate = self
            pickerController.sourceType = .photoLibrary
            pickerController.allowsEditing = true
            present(pickerController, animated: true, completion: nil)
        } else {
            let settingsAction: UIAlertController.CustomAction = ("Settings", .default, { [weak self] in
                self?.openSettings()
            })
            UIAlertController.presentAsAlert(title: "Please allow access to your photos",
                                             message: "Access to your photos has been denied. Please enable it in Settings to continue.",
                                             actions: [("Cancel", .cancel, nil), settingsAction])
        }
    }
    
    /// Opens camera to take a photo
    private func takePhoto() {
        if AVCaptureDevice.authorizationStatus(for: .video) == .authorized {
            let pickerController = UIImagePickerController()
            pickerController.delegate = self
            pickerController.sourceType = .camera
            pickerController.cameraDevice = .front
            pickerController.cameraCaptureMode = .photo
            pickerController.allowsEditing = true
            present(pickerController, animated: true, completion: nil)
        } else {
            let settingsAction: UIAlertController.CustomAction = ("Settings", .default, { [weak self] in
                self?.openSettings()
            })
            UIAlertController.presentAsAlert(title: "Please allow access to your camera",
                                             message: "Access to the camera has been denied. Please enable it in Settings to continue.",
                                             actions: [("Cancel", .cancel, nil), settingsAction])
        }
    }
    
    /// Opens phone's Settings
    private func openSettings() {
        if let url = URL(string: UIApplicationOpenSettingsURLString) {
            if UIApplication.shared.canOpenURL(url) {
                UIApplication.shared.open(url, options: [:], completionHandler: nil)
            }
        }
    }
    
}

// MARK: - UITableViewDataSource
extension ProfileViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return profileMenuItems.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "ProfileCell", for: indexPath)
        cell.textLabel?.text = profileMenuItems[indexPath.row]
        return cell
    }
    
}

// MARK: - UITableViewDelegate
extension ProfileViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        let cellHeight = (tableView.bounds.height - 8) / CGFloat(tableView.numberOfRows(inSection: indexPath.section))
        return min(max(16, cellHeight), 50)
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        // free_drinks_disabled
        //switch indexPath.row {
        //case 0: router?.routeToEditProfile()
        //case 1: router?.routeToInvite()
        //case 2: interactor?.sendSupportMail()
        //case 3: router?.routeToPayments()
        //case 4: router?.routeToSettings()
        //default: break
        //}
        switch indexPath.row {
        case 0: router?.routeToEditProfile()
        case 1:
            router?.routeToSupport()
//            interactor?.sendSupportMail()
        case 2: router?.routeToPayments()
        case 3: router?.routeToSettings()
        default: break
        }
    }
    
}

// MARK: - ProfileDisplayLogic
extension ProfileViewController: ProfileDisplayLogic {
    
    func display(viewModel: Profile.ViewModel) {
        switch viewModel {
        case let .user(userData):
            placeholderImageView.isHidden = profileImageView.image != nil
            profileImageView.pin_setImage(from: userData.imageURL) { [weak self] result in
                self?.placeholderImageView.isHidden = self?.profileImageView.image != nil
            }
            userNameLabel.text = userData.name
            userSavedLabel.text = "YOU SAVED:"
            userSavedAmountLabel.text = userData.saved
            switch userData.verificationState {
            case .needsVerifyPhoneAndEmail:
                verifyContainer.isHidden = false
                verifyPhoneButton.isHidden = false
                verifyEmailButton.isHidden = false
                tableView.isHidden = true
            case .needsVerifyPhone:
                verifyContainer.isHidden = false
                verifyPhoneButton.isHidden = false
                verifyEmailButton.isHidden = true
                tableView.isHidden = true
            case .needsVerifyEmail:
                verifyContainer.isHidden = false
                verifyPhoneButton.isHidden = true
                verifyEmailButton.isHidden = false
                tableView.isHidden = true
            case .verified:
                verifyContainer.isHidden = true
                tableView.isHidden = false
            }
        case let .loading(uploadState):
            switch uploadState {
            case .started(let message):
                showLoader(message)
            case .progress(let progress):
                print("ProfileViewController.imageUploadProgress: \(progress)")
            case .finished:
                hideLoader()
            case .succeeded(let success):
                hideLoader(showing: success ? .success : .error)
            }
        case let .mail(recipients, subject, body):
            SafeMailSender.shared.send(to: recipients,
                                       subject: subject,
                                       body: body,
                                       from: self)
        case .userLoggedOut:
            router?.routeToAuthOnLogout()
        }
    }
    
}

// MARK: - UIImagePickerControllerDelegate & UINavigationControllerDelegate
extension ProfileViewController: UIImagePickerControllerDelegate, UINavigationControllerDelegate {
    
    @objc internal func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) {
        picker.dismiss(animated: true, completion: nil)
        if let mediaType = info[UIImagePickerControllerMediaType] as? String {
            guard mediaType == "public.image" else { return }
            let pickedMedia = info[UIImagePickerControllerEditedImage] ?? info[UIImagePickerControllerOriginalImage]
            if let image = pickedMedia as? UIImage {
                UserDefaults.standard.set(true, for: .didShowNoAvatarAlert)
                interactor?.fetch(.photos(image: image))
            }
        }
    }
    
    @objc internal func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {
        picker.dismiss(animated: true, completion: nil)
    }
    
}
