//
//  EditProfileViewController.swift
//  Qorum
//
//  Created by Dima Tsurkan on 10/12/17.
//  Copyright (c) 2017 Bizico. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import PhoneNumberKit
import FacebookCore
import FacebookLogin

protocol EditProfileDisplayLogic: class {
    
    /// Displays current state based on model
    ///
    /// - Parameter viewModel: state model
    func display(viewModel: EditProfile.ViewModel)
    
    /// Selects Birth Date on corresponding picker
    ///
    /// - Parameter date: birh date
    func setBirthDate(_ date: Date)
    
    /// Selects Gender on corresponding picker
    ///
    /// - Parameter gender: gender
    func setGender(_ gender: User.Gender)
    
    /// Display alert
    ///
    /// - Parameters:
    ///   - title: alert title
    ///   - message: alert text
    func display(title: String?, message: String?)
}

class EditProfileViewController: BaseViewController, SBInstantiable, ScrollableInput {
    
    static let storyboardName = StoryboardName.profile
    var interactor: EditProfileBusinessLogic?
    var router: (NSObjectProtocol & EditProfileRoutingLogic & EditProfileDataPassing)?
    
    // MARK: - Outlets
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var firstNameTextField: UITextField!
    @IBOutlet weak var lastNameTextField: UITextField!
    @IBOutlet weak var birthdayField: UITextField!
    @IBOutlet weak var genderField: UITextField!
    @IBOutlet weak var zipCodeField: UITextField!
    @IBOutlet weak var emailTextField: UITextField!
    @IBOutlet weak var mobileNumberField: PhoneNumberTextField!
    @IBOutlet weak var updateButton: UIButton!

    var tableItems: [EditProfile.TableItem] = []
    
    private(set) lazy var birthdayDatePicker: BirthdayPicker = {
        let picker = BirthdayPicker()
        let gregorian = Calendar(identifier: .gregorian)
        var offsetComponents = DateComponents()
        offsetComponents.year = -13
        picker.datePickerMode = .date
        picker.timeZone = .utc
        picker.maximumDate = gregorian.date(byAdding: offsetComponents, to: Date())
        picker.addTarget(picker, action: #selector(BirthdayPicker.birthdayValueChanged), for: .valueChanged)
        return picker
    }()
    
    private(set) lazy var genderPicker = GenderPicker()
    private(set) lazy var phoneNumberKit = PhoneNumberKit()
    private(set) lazy var defaultCountryPhoneCode = "+\(phoneNumberKit.countryCode(for: mobileNumberField.defaultRegion)!)"
    
    // MARK: - Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    deinit {
        NotificationCenter.default.removeObserver(self)
    }
    
    // MARK: - Setup
    
    private func setup() {
        let viewController = self
        let interactor = EditProfileInteractor()
        let presenter = EditProfilePresenter()
        let router = EditProfileRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        updateButton.layer.borderColor = UIColor.white.cgColor
        updateButton.layer.borderWidth = 1
        updateButton.isHidden = true
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        addKeyboardObserver()
        interactor?.action(.fetchUser)
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        removeKeyboardObserver()
    }
    
    // MARK: - Actions
    
    @IBAction func backButtonPressed(_ sender: Any) {
        router?.routeBack()
    }
    
    @IBAction func updateButtonPressed(_ sender: Any) {
        interactor?.action(.updateUser(tableItems))
    }
    
    // MARK: - ScrollableInput
    
    @objc func inputChanged(_ notification: Notification) {
        update(scrollView: scrollView, with: notification.userInfo)
    }
}

// MARK: - EditProfileDisplayLogic
extension EditProfileViewController: EditProfileDisplayLogic {
    
    func display(viewModel: EditProfile.ViewModel) {
        switch viewModel {
        case let .items(items):
            tableItems = items
            let textFields: [UITextField] = [firstNameTextField, lastNameTextField, birthdayField, genderField, zipCodeField, emailTextField, mobileNumberField]
            for index in 0 ..< textFields.count {
                let item = tableItems[index]
                let textField = textFields[index]
                textField.tag = index
                textField.text = item.text
                textField.attributedPlaceholder = item.attributedPlaceholder
                textField.keyboardType = item.keyboardType
                if item.needsToolBar {
                    textField.applyToolbar()
                }
                if item.isEditable {
                    textField.setClearButton(with: #imageLiteral(resourceName: "clearButtonImage"))
                } else {
                    textField.setImmutabilityIndicator(with: #imageLiteral(resourceName: "facebookImmutabilityImage"))
                }
                switch item.rawItem {
                case .birthDate:
                    birthdayDatePicker.textField = textField
                case .gender:
                    genderPicker.textField = textField
                default: break
                }
                textField.delegate = self
            }
            updateButton.isHidden = true
        case let .updateState(updateState):
            switch updateState {
            case .started: showLoader()
            case .finished: hideLoader()
            }
        case let .verifyAlert(title, message):
            UIAlertController.presentAsAlert(title: title, message: message, actions: [
                ("Skip", .cancel, .none),
                ("Continue", .default, { [weak self] in self?.interactor?.action(.verifyPhone) } as () -> ())
            ])
        }
    }
    
    func display(title: String?, message: String?) {
        guard self.presentedViewController == nil else {
            return
        }
        UIAlertController.presentAsAlert(title: title, message: message)
    }
    
    func setBirthDate(_ date: Date) {
        birthdayDatePicker.date = date
    }
    
    func setGender(_ gender: User.Gender) {
        genderPicker.select(gender: gender)
    }
}

// MARK: - UITextFieldDelegate
extension EditProfileViewController: UITextFieldDelegate {
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        checkChanges(in: textField, for: User.stored)
        return true
    }
    
    func textFieldShouldBeginEditing(_ textField: UITextField) -> Bool {
        let item = tableItems[textField.tag]
        switch item {
        case let item where !item.isEditable:
            display(title: nil, message: "You cannot edit fields from Facebook")
            return false
        case let item where item.rawItem == .email:
            router?.routeToEmailVerification()
            return false
        case let item where item.rawItem == .phone:
            router?.routeToPhoneVerification()
            return false
        default:
            return true
        }
    }
    
    func textFieldDidBeginEditing(_ textField: UITextField) {
        textField.rightView?.isHidden = textField.isTextEmptyOrNil
        if textField == mobileNumberField {
            if textField.isTextEmptyOrNil {
                textField.text = defaultCountryPhoneCode
            }
        }
    }
    
    func textFieldShouldEndEditing(_ textField: UITextField) -> Bool {
        if textField == zipCodeField, let text = textField.text, (text.count > 0 && text.count < 5) {
            display(title: "Zip code", message: "Zip code should be at least 5 symbols")
            return false
        }
        
        return true
    }
    
    func textFieldDidEndEditing(_ textField: UITextField) {
        textField.rightView?.isHidden = true
        if textField == mobileNumberField {
            if mobileNumberField.text! == defaultCountryPhoneCode {
                textField.text = ""
            }
        }
        checkChanges(in: textField, for: User.stored)
    }
    
    func textField(_ textField: UITextField,
                   shouldChangeCharactersIn range: NSRange,
                   replacementString string: String) -> Bool {
        let newString = (textField.text! as NSString).replacingCharacters(in: range, with: string)
        textField.rightView?.isHidden = newString.isEmpty
        return true
    }
    
    func isValid(textField: UITextField) -> Bool {
        switch textField {
        case zipCodeField:
            return zipCodeField.text == nil ? false : (zipCodeField.text!.count == 0 || zipCodeField.text!.count > 4)
        case mobileNumberField:
            return mobileNumberField.text!.isEmpty || mobileNumberField.isValidNumber
        default:
            return !textField.isTextEmptyOrNil
        }
    }
    
    func checkChanges(in textField: UITextField, for user: User) {
        //Fist revert invalid data
        if !isValid(textField: textField) {
            let originalValue: String?
            switch textField {
            case firstNameTextField:
                originalValue = user.firstName
            case lastNameTextField:
                originalValue = user.lastName
            case birthdayField:
                originalValue = user.birthDate?.birthdayString
                if let birthDate = user.birthDate {
                    birthdayDatePicker.date = birthDate
                }
            case genderField:
                originalValue = user.gender.readableLocalized
                genderPicker.select(gender: user.gender)
            case zipCodeField:
                originalValue = user.zipCode
            case emailTextField:
                originalValue = user.email
            case mobileNumberField:
                originalValue = user.mobileNumber
                UIAlertController.presentAsAlert(title: "Mobile # is not valid", message: "Please enter a valid number")
            default: originalValue = nil
            }
            textField.text = originalValue ?? ""
        }
        tableItems[textField.tag].text = textField.text!
        //Then check for changes
        updateButton.isHidden = shouldHideUpdateButton(for: user)
    }
    
    func shouldHideUpdateButton(for user: User) -> Bool {
        guard
            firstNameTextField.text == user.firstName ?? "",
            lastNameTextField.text == user.lastName ?? "",
            birthdayField.text == user.birthDate?.birthdayString ?? "",
            emailTextField.text == user.email ?? "",
            zipCodeField.text == user.zipCode ?? "",
            genderField.text == user.gender.readableLocalized else
        {
            return false
        }
        if let phone = user.mobileNumber {
            let formattedPhone = PartialFormatter().formatPartial(phone)
            if mobileNumberField.text != formattedPhone {
                return false
            }
        } else if !mobileNumberField.isTextEmptyOrNil {
            return false
        }
        return true
    }
    
}

