//
//  EditProfileModels.swift
//  Qorum
//
//  Created by Dima Tsurkan on 10/12/17.
//  Copyright (c) 2017 Bizico. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

struct EditProfile {
    
    enum Request {
        
        /// if fetch user data requested
        case fetchUser
        
        /// if update user parameters requested
        case updateUser([TableItem])
        
        /// if phone number verification requested
        case verifyPhone
    }
    
    enum Response {
        
        /// user data
        case user(User)
        
        /// if update state changed
        case updateState(UpdateState)
        
        /// if update succeded
        case updatedUser
        
        /// if phone is not verified
        case needsVerifyPhone
        
        /// if update failed
        case failedToUpdateUser(String)
    }
    
    enum ViewModel {
        
        /// user parameters
        case items([TableItem])
        
        /// if user in the middle of updating
        case updateState(UpdateState)
        
        /// if phone number or email needs to be verified
        case verifyAlert(title: String, message: String)
    }
    
    enum UpdateState {
        
        /// if update started
        case started
        
        /// if update completed
        case finished
    }
    
    class TableItem {
        
        let rawItem: RawItem
        let attributedPlaceholder: NSAttributedString
        var text: String
        let keyboardType: UIKeyboardType
        let needsToolBar: Bool
        let isEditable: Bool
        
        init(rawItem: RawItem,
             attributedPlaceholder: NSAttributedString,
             text: String,
             keyboardType: UIKeyboardType,
             needsToolBar: Bool,
             isEditable: Bool)
        {
            self.rawItem = rawItem
            self.attributedPlaceholder = attributedPlaceholder
            self.text = text
            self.keyboardType = keyboardType
            self.needsToolBar = needsToolBar
            self.isEditable = isEditable
        }
        
    }
    
    enum RawItem: Int {
        case firstName
        case lastName
        case birthDate
        case gender
        case zipCode
        case email
        case phone
        
        /// Returns value for table item
        ///
        /// - Parameter user: user
        /// - Returns: value string
        func text(from user: User) -> String? {
            switch self {
            case .firstName: return user.firstName
            case .lastName: return user.lastName
            case .birthDate: return user.birthDate?.birthdayString
            case .gender: return user.gender.readable
            case .zipCode: return user.zipCode
            case .email: return user.email
            case .phone: return user.phoneFormatted
            }
        }
        
        var localizedPlaceholder: String {
            let placeholder: String
            switch self {
            case .firstName: placeholder = "First name"
            case .lastName: placeholder = "Last name"
            case .birthDate: placeholder = "Birth date"
            case .gender: placeholder = "Gender"
            case .zipCode: placeholder = "Zip code"
            case .email: placeholder = "E-mail"
            case .phone: placeholder = "Mobile # (optional)"
            }
            return NSLocalizedString(placeholder, comment: "")
        }
        
        func isEditable(for user: User) -> Bool {
            switch self {
            case .firstName: return !user.facebookSupplied.contains("first_name")
            case .lastName: return !user.facebookSupplied.contains("last_name")
            case .birthDate: return !user.facebookSupplied.contains("birthdate")
            case .gender: return !user.facebookSupplied.contains("gender")
            case .zipCode: return !user.facebookSupplied.contains("zip_code")
            case .email: return !user.facebookSupplied.contains("email")
            case .phone: return !user.facebookSupplied.contains("phone")
            }
        }
        
        /// defines keyboard type
        var keyboardType: UIKeyboardType {
            switch self {
            case .firstName,
                 .lastName,
                 .birthDate,
                 .gender: return .default
            case .zipCode: return .numberPad
            case .email: return .emailAddress
            case .phone: return .phonePad
            }
        }
        
        /// defines fields with toolbar
        var needsToolBar: Bool {
            switch self {
            case .firstName,
                 .lastName,
                 .email: return false
            case .birthDate,
                 .gender,
                 .zipCode,
                 .phone: return true
            }
        }
        
        func tableItem(for user: User) -> EditProfile.TableItem {
            return EditProfile.TableItem(rawItem: self,
                                         attributedPlaceholder: NSAttributedString(string: localizedPlaceholder,
                                                                                   attributes: [.foregroundColor: UIColor(white: 1, alpha: 0.5)]),
                                         text: text(from: user) ?? "",
                                         keyboardType: keyboardType,
                                         needsToolBar: needsToolBar,
                                         isEditable: isEditable(for: user))
        }
        
    }
    
}
