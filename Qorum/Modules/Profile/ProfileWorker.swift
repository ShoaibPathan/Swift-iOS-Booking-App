//
//  ProfileWorker.swift
//  Qorum
//
//  Created by Dima Tsurkan on 10/3/17.
//  Copyright (c) 2017 Bizico. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import FacebookCore
import FacebookLogin
import UberCore
import SDWebImage
import Moya
import Alamofire
import SwiftyJSON

class ProfileWorker {
    
    // MARK: - Public
    
    /// Fetches user by id from server
    ///
    /// - Parameters:
    ///   - id: user id
    ///   - completion: completion block
    func fetchUser(id: Int, completion: @escaping APIHandler<User>) {
        let request = AuthenticatedRequest(target: .fetchUser(id: id))
        request.performDecoding(completion: completion)
    }
    
    /// Fetches user's profile image from Facebook
    ///
    /// - Parameters:
    ///   - maxSize: max image size
    ///   - completion: completion block
    func fetchFacebookAvatar(maxSize: Int, completion: @escaping APIHandler<FBUserAvatar>) {
        guard AccessToken.current?.authenticationToken != nil else {
            completion(.error("The Facebook user isn't logged in"))
            // TODO: login
            return
        }
        let request = FacebookRequest(target: .picture(maxSize: maxSize))
        request.performDecoding(for: "picture", completion: completion)
    }
    
    /// Downloads user's profile image from Facebook
    ///
    /// - Parameters:
    ///   - url: image url
    ///   - completion: completion block
    func downloadImage(from url: URL, completion: @escaping APIHandler<UIImage>) {
        SDWebImageDownloader.shared().downloadImage(with: url, options: [], progress: nil) { (image, _, error, _) in
            if let image = image {
                completion(.value(image))
            } else if let error = error {
                completion(.error(error))
            } else {
                completion(.error("Unexpected error"))
            }
        }
    }
    
    
    /// Uploads image captured from camera/camera roll
    ///
    /// - Parameters:
    ///   - image: source image
    ///   - user: current user
    ///   - progressHandler: progress block
    ///   - completion: completion block
    func upload(image: UIImage,
                for user: User,
                progress progressHandler: ((Double) -> Void)? = .none,
                completion: @escaping APIHandler<User>) {
        guard !user.isGuest else {
            completion(.error("Guest user can't upload an image"))
            return
        }
        guard let token = AppToken.token else {
            completion(.error("The user isn't logged in (token missing)"))
            return
        }
        let multipartFormData: (Alamofire.MultipartFormData) -> Void = { multipartFormData in
            if let imageData = UIImageJPEGRepresentation(image.fixOrientation(), 0.8) {
                let filename = "\(Date().timeIntervalSince1970)_\(user.userId).jpg"
                multipartFormData.append(imageData, withName: "profile_pic", fileName: filename, mimeType: "image/jpeg")
            }
        }
        
        let base = AppConfig.environment.url.absoluteString
        let url = "\(base)/api/v2/patrons/\(user.userId)/profilePic/"
        let header = ["Authorization": "Bearer \(token)"]
        
        Alamofire.upload(multipartFormData: multipartFormData, to: url, method: .post, headers: header) { result in
            switch result {
            case let .success(request, _, _):
                request.responseJSON { response in
                    switch response.result {
                    case let .success(value):
                        guard let userDict = value as? [String: Any] else {
                            completion(.error(typeMismatch(expected: [String: Any].self, actual: value)))
                            return
                        }
                        completion(User.result(json: JSON(userDict)))
                    case let .failure(error):
                        print(error)
                        completion(.error(error))
                    }
                }
                request.uploadProgress { progress in
                    progressHandler?(progress.fractionCompleted)
                }
            case let .failure(error):
                print(error)
                completion(.error(error))
            }
        }
    }
    
    /// Fetches user data and stores locally
    ///
    /// - Parameters:
    ///   - user: user to store
    ///   - completion: completion block
    func fetchAndSave(user: User,
                      completion: ((User?)->())? = nil) {
        fetchUser(id: user.userId) { result in
            if case let .value(fetchedUser) = result {
                fetchedUser.isAvatarPlaceholder = user.isAvatarPlaceholder
                fetchedUser.save()
                // TODO: - need to replicate the following functionality @sshemiakov
                
                //if QorumAPIClient.sharedInstance.userCanCheckIn(isSilent: true) {
                //    let notification = Notification(name: Notification.Name(rawValue: self.user.userCanCheckInNotificationName),
                //                                    object: self.user)
                //    NotificationCenter.default.post(notification)
                //}
                completion?(fetchedUser)
            } else {
                completion?(nil)
            }
        }
    }
    
    /// Logs out user from the app
    ///
    /// - Parameter completion: completion block
    func logoutUser(completion: @escaping () -> Void) {
        User.stored.delete()
        LoginManager().logOut()
        TokenManager.deleteToken()
        UserDefaults.standard.resetLaunchCount()
        AppDelegate.shared.clearHashedData()
        AppToken.remove()
        SettingsWorker().logoutTwitterRequest()
        completion()
    }
    
}
