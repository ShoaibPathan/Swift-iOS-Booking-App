//
//  InviteViewController.swift
//  Qorum
//
//  Created by Stanislav on 29.11.2017.
//  Copyright (c) 2017 Bizico. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol InviteDisplayLogic: class {
    
    /// Displays current state
    ///
    /// - Parameter viewModel: state model
    func display(viewModel: Invite.ViewModel)
    
    
    /// Displays result of invite process
    ///
    /// - Parameter viewModel: invite result model
    func display(viewModel: Invite.Result.ViewModel)
}

class InviteViewController: BaseViewController, SBInstantiable {
    
    static let storyboardName = StoryboardName.profile
    var interactor: InviteBusinessLogic?
    var router: (NSObjectProtocol & InviteRoutingLogic & InviteDataPassing)?
    
    var tableItems: [Invite.TableItem] = []
    var appearanceType: String?
    
    // MARK: - Outlets
    
    @IBOutlet weak var inviteButtonsContainer: UIStackView!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var termsButton: UIButton!
    @IBOutlet weak var verifyContainer: UIStackView!
    @IBOutlet weak var verifyPhoneButton: UIButton!
    @IBOutlet weak var verifyEmailButton: UIButton!
    
    // MARK: - Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: - Setup
    
    private func setup() {
        let viewController = self
        let interactor = InviteInteractor()
        let presenter = InvitePresenter()
        let router = InviteRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        router?.dataStore?.appearanceType = appearanceType
        tableView.bounces = false
        tableView.dataSource = self
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        interactor?.fetchUser()
    }
    
    // MARK: - Actions
    
    @IBAction func backButtonPressed(_ sender: Any) {
        router?.routeBack()
    }
    
    @IBAction func facebookButtonPressed(_ sender: Any) {
        interactor?.action(.facebook(from: self))
    }
    
    @IBAction func twitterButtonPressed(_ sender: Any) {
        interactor?.action(.twitter(from: self))
    }
    
    @IBAction func otherButtonPressed(_ sender: Any) {
        interactor?.action(.other(from: self))
    }
    
    @IBAction func emailButtonPressed(_ sender: Any) {
        interactor?.action(.email(from: self))
    }
    
    @IBAction func smsButtonPressed(_ sender: Any) {
        interactor?.action(.sms(from: self))
    }
    
    @IBAction func termsButtonPressed(_ sender: Any) {
        router?.routeToLegalNote()
    }
    
    @IBAction func verifyPhoneButtonPressed(_ sender: Any) {
        router?.routeToPhoneVerification()
    }
    
    @IBAction func verifyEmailButtonPressed(_ sender: Any) {
        router?.routeToEmailVerification()
    }
    
}

// MARK: - InviteDisplayLogic
extension InviteViewController: InviteDisplayLogic {
    
    func display(viewModel: Invite.ViewModel) {
        switch viewModel {
        case .needsVerifyPhoneAndEmail:
            verifyContainer.isHidden = false
            verifyPhoneButton.isHidden = false
            verifyEmailButton.isHidden = false
            inviteButtonsContainer.alpha = 0.2
            inviteButtonsContainer.isUserInteractionEnabled = false
            tableView.isHidden = true
            termsButton.isHidden = true
        case .needsVerifyPhone:
            verifyContainer.isHidden = false
            verifyPhoneButton.isHidden = false
            verifyEmailButton.isHidden = true
            inviteButtonsContainer.alpha = 0.2
            inviteButtonsContainer.isUserInteractionEnabled = false
            tableView.isHidden = true
            termsButton.isHidden = true
        case .needsVerifyEmail:
            verifyContainer.isHidden = false
            verifyPhoneButton.isHidden = true
            verifyEmailButton.isHidden = false
            inviteButtonsContainer.alpha = 0.2
            inviteButtonsContainer.isUserInteractionEnabled = false
            tableView.isHidden = true
            termsButton.isHidden = true
        case .verified(let items):
            verifyContainer.isHidden = true
            inviteButtonsContainer.alpha = 1
            inviteButtonsContainer.isUserInteractionEnabled = true
            tableView.isHidden = false
            termsButton.isHidden = false
            tableItems = items
            tableView.reloadData()
        }
    }
    
    func display(viewModel: Invite.Result.ViewModel) {
        UIAlertController.presentAsAlert(title: viewModel.title, message: viewModel.message)
    }
}

// MARK: - UITableViewDataSource
extension InviteViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return tableItems.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "InviteCell", for: indexPath)
        let item = tableItems[indexPath.row]
        cell.textLabel?.text = item.name
        cell.detailTextLabel?.text = "\(item.count)"
        return cell
    }
    
}


