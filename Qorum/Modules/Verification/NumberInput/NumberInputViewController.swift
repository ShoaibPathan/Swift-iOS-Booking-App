//
//  NumberInputViewController.swift
//  Qorum
//
//  Created by Stanislav on 05.04.2018.
//  Copyright (c) 2018 Bizico. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NumberInputDisplayLogic: class {

    /// Displays current state
    ///
    /// - Parameter viewModel: model to describe current state
    func display(viewModel: NumberInput.ViewModel)
    
    
    /// Shows loader with custom message
    ///
    /// - Parameter message: message to show
    func showLoader(_ message: String?)
    
    /// Hides loader
    func hideLoader()
}

class NumberInputViewController: BaseViewController, SBInstantiable, ScrollableInput {
    
    static let storyboardName = StoryboardName.verification
    var interactor: NumberInputBusinessLogic?
    var router: (NSObjectProtocol & NumberInputRoutingLogic & NumberInputDataPassing)?
    
    let submitButton: UIButton = {
        let submitButton = UIButton(type: .system)
        submitButton.addTarget(self, action: #selector(submitButtonPressed), for: .touchUpInside)
        submitButton.tintColor = .white
        submitButton.setTitle("SUBMIT", for: .normal)
        submitButton.titleLabel?.font = UIFont.montserrat.medium(14)
        submitButton.setTitleColor(UIColor(in8bit: 130, 134, 145), for: .disabled)
        submitButton.setBackgroundImage(#imageLiteral(resourceName: "background-button"), for: .normal)
        submitButton.setBackgroundImage(UIImage(color: UIColor(in8bit: 218, 218, 218)), for: .disabled)
        submitButton.frame = CGRect(x: 0, y: 0, width: .deviceWidth, height: 50)
        return submitButton
    }()
    
    var canClose = true {
        didSet {
            closeButton?.isHidden = !canClose
        }
    }
    
    // MARK: - Outlets
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var contentHeight: NSLayoutConstraint!
    @IBOutlet weak var closeButton: UIButton!
    @IBOutlet weak var numberTextField: UITextField!
    @IBOutlet weak var warningLabel: UILabel!
    
    // MARK: - Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    private func setup() {
        let viewController = self
        let interactor = NumberInputInteractor()
        let presenter = NumberInputPresenter()
        let router = NumberInputRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configureView()
        AnalyticsService.shared.track(event: MixpanelEvents.viewPhoneVerificationScreen.rawValue)
        interactor?.fetchPhone()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        addKeyboardObserver()
        numberTextField.becomeFirstResponder()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        view.endEditing(true)
        removeKeyboardObserver()
    }
    
    // MARK: - Configurations
    
    func configureView() {
        numberTextField.attributedPlaceholder = NSAttributedString(string: numberTextField.placeholder ?? "",
                                                                   attributes: [.foregroundColor: UIColor(in8bit: 130, 134, 145)])
        submitButton.isEnabled = false
        numberTextField.inputAccessoryView = submitButton
        numberTextField.delegate = self
        warningLabel.alpha = 0
        closeButton.isHidden = !canClose
    }
    
    // MARK: - ScrollableInput
    
    @objc func inputChanged(_ notification: Notification) {
        let bottomInset = update(scrollView: scrollView, with: notification.userInfo)
        contentHeight.constant = scrollView.height - (bottomInset ?? 0)
        view.setNeedsLayout()
    }
    
    // MARK: - Actions
    
    @IBAction func closeButtonPressed(_ sender: Any) {
        router?.routeClose()
    }
    
    @IBAction func policyButtonPressed(_ sender: Any) {
        router?.routeToPolicy()
    }
    
    @objc func submitButtonPressed() {
        interactor?.validatePhone(request: .init(number: numberTextField.text ?? ""))
    }
    
}

// MARK: - NumberInputDisplayLogic
extension NumberInputViewController: NumberInputDisplayLogic {
    
    func display(viewModel: NumberInput.ViewModel) {
        switch viewModel {
        case .phone(let phone):
            numberTextField.text = phone
            submitButton.isEnabled = !phone.isEmpty
        case .warning(let message):
            warningLabel.text = message
            warningLabel.alpha = 1
        case .mayVerifyCode:
            warningLabel.alpha = 0
            router?.routeToCodeVerification()
        }
    }
    
}

// MARK: - UITextFieldDelegate
extension NumberInputViewController: UITextFieldDelegate {
    
    func textField(_ textField: UITextField,
                   shouldChangeCharactersIn range: NSRange,
                   replacementString string: String) -> Bool {
        let newString = (textField.text! as NSString).replacingCharacters(in: range, with: string)
        submitButton.isEnabled = !newString.isEmpty
        warningLabel.alpha = 0
        return true
    }
    
}
