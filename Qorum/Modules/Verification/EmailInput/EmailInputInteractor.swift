//
//  EmailInputInteractor.swift
//  Qorum
//
//  Created by Stanislav on 10.04.2018.
//  Copyright (c) 2018 Bizico. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EmailInputBusinessLogic: class {
    
    /// Virifies email
    ///
    /// - Parameter request: request with email string
    func verifyEmail(request: EmailInput.Request)
    
    
    /// Fetches stored email
    func fetchEmail()
}

protocol EmailInputDataStore {
    // var name: String { get set }
}

class EmailInputInteractor: EmailInputDataStore {
    var presenter: EmailInputPresentationLogic?
    private(set) lazy var worker = EmailInputWorker()
    private(set) lazy var profileWorker = ProfileWorker()
}

// MARK: - EmailInputBusinessLogic
extension EmailInputInteractor: EmailInputBusinessLogic {
    
    func verifyEmail(request: EmailInput.Request) {
        let email = request.email.trimmingCharacters(in: .whitespacesAndNewlines)
        let user = User.stored
        let validationResult = worker.validate(email: email, for: user)
        switch validationResult {
        case let .value(isValid):
            guard isValid else {
                presenter?.present(response: .invalidEmail)
                return
            }
            presenter?.showLoader(message: "Submitting Email...")
            worker.submit(email: email, for: user) { [weak presenter, weak profileWorker] response in
                presenter?.hideLoader()
                if case .success = response {
                    let user = User.stored
                    user.email = email
                    user.isEmailVerified = false
                    user.save()
                    UserDefaults.standard.set(true, for: .pendingEmailVerification)
                    profileWorker?.fetchAndSave(user: user)
                }
                presenter?.present(response: response)
            }
        case let .error(error):
            presenter?.present(response: .error(error))
        }
    }
    
    func fetchEmail() {
        if let email = User.stored.email {
            presenter?.present(response: .email(email))
        }
    }
    
}

