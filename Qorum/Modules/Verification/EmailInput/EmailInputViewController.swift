//
//  EmailInputViewController.swift
//  Qorum
//
//  Created by Stanislav on 10.04.2018.
//  Copyright (c) 2018 Bizico. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EmailInputDisplayLogic: class {
    
    /// Displays current state
    ///
    /// - Parameter viewModel: model to describe current state
    func display(viewModel: EmailInput.ViewModel)
    
    
    /// Shows loader with custom message
    ///
    /// - Parameter message: message to show
    func showLoader(_ message: String?)
    
    
    /// Hides loader
    func hideLoader()
}

class EmailInputViewController: BaseViewController, SBInstantiable, ScrollableInput {
    
    static let storyboardName = StoryboardName.verification
    var interactor: EmailInputBusinessLogic?
    var router: (NSObjectProtocol & EmailInputRoutingLogic & EmailInputDataPassing)?
    
    let submitButton: UIButton = {
        let submitButton = UIButton(type: .system)
        submitButton.addTarget(self, action: #selector(submitButtonPressed), for: .touchUpInside)
        submitButton.tintColor = .white
        submitButton.setTitle("SUBMIT", for: .normal)
        submitButton.titleLabel?.font = UIFont.montserrat.medium(14)
        submitButton.setTitleColor(UIColor(in8bit: 130, 134, 145), for: .disabled)
        submitButton.setBackgroundImage(#imageLiteral(resourceName: "background-button"), for: .normal)
        submitButton.setBackgroundImage(UIImage(color: UIColor(in8bit: 218, 218, 218)), for: .disabled)
        submitButton.frame = CGRect(x: 0, y: 0, width: .deviceWidth, height: 50)
        return submitButton
    }()
    
    // MARK: - Outlets
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var contentHeight: NSLayoutConstraint!
    @IBOutlet weak var emailTextField: UITextField!
    @IBOutlet weak var warningLabel: UILabel!
    
    // MARK: - Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    private func setup() {
        let viewController = self
        let interactor = EmailInputInteractor()
        let presenter = EmailInputPresenter()
        let router = EmailInputRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configureView()
        AnalyticsService.shared.track(event: MixpanelEvents.viewEmailCaptureScreen.rawValue)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        interactor?.fetchEmail()
        addKeyboardObserver()
        emailTextField.becomeFirstResponder()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        view.endEditing(true)
        removeKeyboardObserver()
    }
    
    // MARK: - Configurations
    
    func configureView() {
        emailTextField.attributedPlaceholder = NSAttributedString(string: emailTextField.placeholder ?? "",
                                                                  attributes: [.foregroundColor: UIColor(in8bit: 130, 134, 145)])
        submitButton.isEnabled = false
        emailTextField.inputAccessoryView = submitButton
        emailTextField.delegate = self
        warningLabel.alpha = 0
    }
    
    // MARK: - ScrollableInput
    
    @objc func inputChanged(_ notification: Notification) {
        let bottomInset = update(scrollView: scrollView, with: notification.userInfo)
        contentHeight.constant = scrollView.height - (bottomInset ?? 0)
        view.setNeedsLayout()
    }
    
    // MARK: - Actions
    
    @IBAction func closeButtonPressed(_ sender: Any) {
        router?.routeClose()
    }
    
    @IBAction func policyButtonPressed(_ sender: Any) {
        router?.routeToPolicy()
    }
    
    @objc func submitButtonPressed() {
        interactor?.verifyEmail(request: .init(email: emailTextField.text ?? ""))
    }
    
}

// MARK: - EmailInputDisplayLogic
extension EmailInputViewController: EmailInputDisplayLogic {
    
    func display(viewModel: EmailInput.ViewModel) {
        switch viewModel {
        case .warning(let message):
            warningLabel.text = message
            warningLabel.alpha = 1
        case .email(let email):
            emailTextField.text = email
            submitButton.isEnabled = !email.isEmpty
        case .mayClose:
            warningLabel.alpha = 0
            view.endEditing(true)
            let pendingMessage = "Please check your email inbox for the verification email from Qorum. In the email, tap on the verification link to confirm your email address is correct. If you do not wish to verify your email, you cannot open a tab via the Qorum app"
            let changeEmailAction: UIAlertController.CustomAction
            changeEmailAction = ("Change Email", .cancel, { [weak self] in
                self?.emailTextField.becomeFirstResponder()
            })
            let gotItAction: UIAlertController.CustomAction
            gotItAction = ("Got It", .default, { [weak self] in
                self?.showLoader()
                User.stored.checkEmailStatus { [weak self] _ in
                    self?.hideLoader()
                    self?.router?.routeClose()
                }
            })
            UIAlertController.presentAsAlert(title: "Pending email verification",
                                             message: pendingMessage,
                                             actions: [changeEmailAction, gotItAction])
        }
    }
    
}

// MARK: - UITextFieldDelegate
extension EmailInputViewController: UITextFieldDelegate {
    
    func textField(_ textField: UITextField,
                   shouldChangeCharactersIn range: NSRange,
                   replacementString string: String) -> Bool {
        let newString = ((textField.text ?? "") as NSString).replacingCharacters(in: range, with: string)
        submitButton.isEnabled = !newString.isEmpty
        warningLabel.alpha = 0
        return true
    }
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        if submitButton.isEnabled {
            submitButtonPressed()
            return true
        }
        return false
    }
    
}
