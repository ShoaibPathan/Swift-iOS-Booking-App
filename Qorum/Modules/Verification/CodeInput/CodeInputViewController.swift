//
//  CodeInputViewController.swift
//  Qorum
//
//  Created by Stanislav on 09.04.2018.
//  Copyright (c) 2018 Bizico. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CodeInputDisplayLogic: class {
    
    /// Displays current state
    ///
    /// - Parameter viewModel: model to describe current state
    func display(viewModel: CodeInput.ViewModel)
    
    /// Shows loader with custom message
    ///
    /// - Parameter message: message to show
    func showLoader(_ message: String?)
    
    /// Hides loader
    func hideLoader()
}

class CodeInputViewController: BaseViewController, SBInstantiable, ScrollableInput {
    
    static let storyboardName = StoryboardName.verification
    var interactor: CodeInputBusinessLogic?
    var router: (NSObjectProtocol & CodeInputRoutingLogic & CodeInputDataPassing)?
    
    let submitButton: UIButton = {
        let submitButton = UIButton(type: .custom)
        submitButton.addTarget(self, action: #selector(submitButtonPressed), for: .touchUpInside)
        submitButton.tintColor = .white
        submitButton.setTitle("SUBMIT", for: .normal)
        submitButton.titleLabel?.font = UIFont.montserrat.medium(14)
        submitButton.setTitleColor(UIColor(in8bit: 130, 134, 145), for: .disabled)
        submitButton.setBackgroundImage(#imageLiteral(resourceName: "background-button"), for: .normal)
        submitButton.setBackgroundImage(UIImage(color: UIColor(in8bit: 218, 218, 218)), for: .disabled)
        submitButton.frame = CGRect(x: 0, y: 0, width: .deviceWidth, height: 50)
        return submitButton
    }()
    
    // MARK: - Outlets
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var contentHeight: NSLayoutConstraint!
    @IBOutlet weak var codeTextField: UITextField!
    @IBOutlet weak var warningLabel: UILabel!
    @IBOutlet weak var resendButton: UIButton!
    
    // MARK: - Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    private func setup() {
        let viewController = self
        let interactor = CodeInputInteractor()
        let presenter = CodeInputPresenter()
        let router = CodeInputRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configureView()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        interactor?.disableResendButton()
        addKeyboardObserver()
        codeTextField.becomeFirstResponder()
        if !isSubmitButtonAvailable {
            interactor?.disableSubmitButton()
        }
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        view.endEditing(true)
        removeKeyboardObserver()
    }
    
    // MARK: - Configurations
    
    func configureView() {
        codeTextField.attributedPlaceholder = NSAttributedString(string: codeTextField.placeholder ?? "",
                                                                 attributes: [.foregroundColor: UIColor(in8bit: 130, 134, 145)])
        submitButton.isEnabled = false
        codeTextField.inputAccessoryView = submitButton
        codeTextField.delegate = self
        warningLabel.alpha = 0
    }
    
    
    /// indicates whether the date for the last failed attempt exists in UserDefaults and this failure occured more than a minute ago.
    /// The date will be removed automatically from UseDafaults if it's more than a minute ago.
    /// Will return `true` if no date for failed attempt in UserDefaults were found or if this failure occured more than a minute ago, otherwise `false`.
    fileprivate var isSubmitButtonAvailable: Bool {
        if let codeInputLastFailedSubmit = UserDefaults.standard.object(forKey: UserDefaultsKeys.codeInputLastFailedSubmit.rawValue) as? Date {
            if Date().timeIntervalSince(codeInputLastFailedSubmit) < CodeInput.submittingTimeout {
                return false
            } else {
                UserDefaults.standard.removeObject(forKey: UserDefaultsKeys.codeInputLastFailedSubmit.rawValue)
            }
        }
        return true
    }
    
    // MARK: - ScrollableInput
    
    @objc func inputChanged(_ notification: Notification) {
        let bottomInset = update(scrollView: scrollView, with: notification.userInfo)
        contentHeight.constant = scrollView.height - (bottomInset ?? 0)
        view.setNeedsLayout()
    }
    
    // MARK: - Actions
    
    @IBAction func backButtonPressed(_ sender: Any) {
        router?.routeBack()
    }
    
    @IBAction func resendButtonPressed(_ sender: Any) {
        interactor?.requestVerificationCode()
        interactor?.disableResendButton()
    }
    
    @objc func submitButtonPressed() {
        let request = CodeInput.Request(code: codeTextField.text ?? "")
        interactor?.verifyCode(request: request)
    }
    
}

// MARK: - CodeInputDisplayLogic
extension CodeInputViewController: CodeInputDisplayLogic {
    
    func display(viewModel: CodeInput.ViewModel) {
        switch viewModel {
        case .warning(let message):
            warningLabel.text = message
            warningLabel.alpha = 1
        case let .resubmitButton(isEnabled, text):
            submitButton.isEnabled = isEnabled
            let state: UIControlState = isEnabled ? .normal : .disabled
            submitButton.setTitle(text, for: state)
        case let .resendButton(isEnabled, text):
            resendButton.isEnabled = isEnabled
            resendButton.setTitle(text, for: .normal)
        case .mayVerifyEmail:
            warningLabel.alpha = 0
            router?.routeToEmailVerification()
        case .mayClose:
            warningLabel.alpha = 0
            router?.routeClose()
        case .failure(let message):
            UIAlertController.presentAsAlert(title: "Ooops!",
                                             message: message,
                                             actions: [UIAlertController.CustomAction("Ok", .default, { [weak self] in
                                                self?.router?.routeBack()
                                             })]
            )
        }
    }
    
}

// MARK: - UITextFieldDelegate
extension CodeInputViewController: UITextFieldDelegate {
    
    func textField(_ textField: UITextField,
                   shouldChangeCharactersIn range: NSRange,
                   replacementString string: String) -> Bool {
        let newString = (textField.text! as NSString).replacingCharacters(in: range, with: string)
        submitButton.isEnabled = !newString.isEmpty && isSubmitButtonAvailable
        warningLabel.alpha = 0
        return true
    }
    
}
