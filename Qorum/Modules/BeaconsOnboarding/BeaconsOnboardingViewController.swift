//
//  BeaconsOnboardingViewController.swift
//  Qorum
//
//  Created by Vadym Riznychok on 6/8/18.
//  Copyright (c) 2018 Bizico. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BOLocationAccessDisplayLogic: class {
    func displayLocationRequest()
    func displayBARViewController()
    func displayLoader(shouldDisplay: Bool)
}

class BeaconsOnboardingViewController: BaseViewController, SBInstantiable {
    
    static let storyboardName = StoryboardName.beaconsOnboarding
    var interactor: BeaconsOnboardingBusinessLogic?
    var router: (NSObjectProtocol & BeaconsOnboardingRoutingLogic & BeaconsOnboardingDataPassing)?
    
    let leftArrow = ArrowsView(arrowSize: CGSize(width: 30, height: 18),
                               arrowSpacing: 12)
    let rightArrow = ArrowsView(arrowSize: CGSize(width: 30, height: 18),
                                arrowSpacing: 12)
    
    var shouldTrackLocationChanges = false

    // MARK: Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: Setup
  
    private func setup() {
        let viewController = self
        let interactor = BeaconsOnboardingInteractor()
        let presenter = BeaconsOnboardingPresenter()
        let router = BeaconsOnboardingRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.locationController = viewController
        router.locationController = viewController
        router.dataStore = interactor
    }
  
    // MARK: View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()
        configureView()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        let alertVC = UIAlertController.init(title: "Allow \"Qorum-demo\" to also access your location even when you are not using the app?",
                                             message: "Qorum uses your location to magically open your tab when you walk into our bars.", preferredStyle: .alert)
        alertVC.addAction(UIAlertAction(title: "Set Up Auto-Checkin Later", style: .default, handler: { (action) in
            self.didSelectLater()
        }))
        alertVC.addAction(UIAlertAction(title: "Allow", style: .cancel, handler: { (action) in
            self.didSelectAllow()
        }))
        self.present(alertVC, animated: true, completion: nil)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        navigationController?.isNavigationBarHidden = true
        NotificationCenter.default.addObserver(self,
                                               selector: #selector(didBecomeActive),
                                               name: .UIApplicationDidBecomeActive,
                                               object: nil)
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        NotificationCenter.default.removeObserver(self)
        LocationService.shared.delegate = LocationService.shared
    }
    
    func configureView() {
        addAnimatedArrows()
        view.backgroundColor = #colorLiteral(red: 0.01960784314, green: 0.05098039216, blue: 0.1411764706, alpha: 0.7037938784)
    }
    
    func didSelectLater() {
        interactor?.delayLocationRequest()
    }
    
    func didSelectAllow() {
        interactor?.requestLocationAccess()
    }
    
    @objc func didBecomeActive() {
        if shouldTrackLocationChanges, LocationService.authorizationStatus() != .authorizedAlways {
            interactor?.alwaysUseDenied()
        }
    }
    
    /// Adds left/right arrows animation
    func addAnimatedArrows() {
        rightArrow.transform = CGAffineTransform(rotationAngle: -.pi/2)
        leftArrow.transform = CGAffineTransform(rotationAngle: .pi/2)
        for arrow in  [rightArrow, leftArrow] {
            view.addSubview(arrow)
            arrow.translatesAutoresizingMaskIntoConstraints = false
            arrow.addConstraints(
                [arrow.widthAnchor.constraint(equalToConstant: 30),
                 arrow.heightAnchor.constraint(equalToConstant: 40)]
            )
        }
        view.addConstraints(
            [rightArrow.centerYAnchor.constraint(equalTo: view.centerYAnchor, constant: 111),
             rightArrow.rightAnchor.constraint(equalTo: view.rightAnchor, constant: -12),
             leftArrow.centerYAnchor.constraint(equalTo: view.centerYAnchor, constant: 111),
             leftArrow.leftAnchor.constraint(equalTo: view.leftAnchor, constant: 12)]
        )
    }
    
}

extension BeaconsOnboardingViewController: BOLocationAccessDisplayLogic {
    
    
    /// Asks for location permissions
    func displayLocationRequest() {
        LocationService.shared.requestAuthorization(isAlwaysUse: true) { [weak self] (status) in
            self?.interactor?.alwaysUseAllowed()
        }
//        LocationService.shared.delegate = self
//        LocationService.shared.requestAlwaysAuthorization()
        shouldTrackLocationChanges = true
//        AnalyticsService.shared.track(event: MixpanelEvents.viewLocationAlwaysAllowAlert.rawValue)
    }
    
    func displayBARViewController() {
        router?.routeToBARVC()
    }
    
    func displayLoader(shouldDisplay: Bool) {
        if shouldDisplay {
            showLoader("Updating info")
        } else {
            hideLoader()
        }
    }
    
}

//extension BeaconsOnboardingViewController: CLLocationManagerDelegate {
//    
//    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {
//        switch status {
//        case .authorizedAlways:
//            interactor?.alwaysUseAllowed()
//            AnalyticsService.shared.track(event: MixpanelEvents.respondToLocationAlwaysAllowAccessAlert.rawValue, properties: ["Response": "Allow Always"])
//        case .authorizedWhenInUse:
//            AnalyticsService.shared.track(event: MixpanelEvents.respondToLocationAlwaysAllowAccessAlert.rawValue, properties: ["Response": "Allow In Use"])
//        case .denied:
//            AnalyticsService.shared.track(event: MixpanelEvents.respondToLocationAlwaysAllowAccessAlert.rawValue, properties: ["Response": "Not Allowed"])
//        default:
//            break
//        }
//    }
//}
