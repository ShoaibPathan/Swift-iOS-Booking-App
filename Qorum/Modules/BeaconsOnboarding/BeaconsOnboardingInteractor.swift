//
//  BeaconsOnboardingInteractor.swift
//  Qorum
//
//  Created by Vadym Riznychok on 6/8/18.
//  Copyright (c) 2018 Bizico. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BeaconsOnboardingBusinessLogic {
    func requestLocationAccess()
    func delayLocationRequest()
    func alwaysUseAllowed()
    func alwaysUseDenied()
}

protocol BeaconsOnboardingDataStore {
    
}

class BeaconsOnboardingInteractor: BeaconsOnboardingBusinessLogic, BeaconsOnboardingDataStore {
    var presenter: BeaconsOnboardingPresentationLogic?
    var worker: BeaconsOnboardingWorker?
    
    /// Updates location permissions with allowed state from pre-prompt alert
    func requestLocationAccess() {
        updateUser(parameters: ["always_allow_pre_prompt_response": "allow"], completion: { [weak self] (success) in
            UserDefaults.standard.set(true, for: .didShowAlwaysUseLocationRequest)
            self?.presenter?.presentLocationRequest()
        })
    }
    
    /// Updates location permissions with denied state from pre-prompt alert
    func delayLocationRequest() {
        let parameters = ["always_allow_pre_prompt_response": "maybe_later"]
        updateUser(parameters: parameters) { [weak self] success in
            let alwaysUseLocationRequestDate = UserDefaultsKeys.alwaysUseLocationRequestDate.rawValue
            UserDefaults.standard.set(Date(), forKey: alwaysUseLocationRequestDate)
            self?.presenter?.presentBARViewController()
        }
    }
    
    /// Updates location permissions with always allowed state
    func alwaysUseAllowed() {
        updateUser(parameters: ["always_allow_system_prompt_response": "always_allow"], completion: { [weak self] (success) in
            self?.presenter?.presentBARViewController()
        })
    }
    
    /// Updates location permissions with in-use only state
    func alwaysUseDenied() {
        updateUser(parameters: ["always_allow_system_prompt_response": "only_while_using_the_app"], completion: { [weak self] (success) in
            self?.presenter?.presentBARViewController()
        })
    }
    
    /// Updates user's permissions on backend
    ///
    /// - Parameters:
    ///   - parameters: dictionary with updated parameters
    ///   - completion: completion block
    fileprivate func updateUser(parameters: [String: Any],
                                completion: @escaping (Bool) -> ()) {
        let user = User.stored
        guard !user.isGuest else {
            completion(false)
            return
        }
        
        presenter?.presentLoader(shouldPresent: true)
        worker = BeaconsOnboardingWorker()
        
        worker?.updateUser(id: user.userId, parameters: parameters, completion: { [weak self] (result) in
            self?.presenter?.presentLoader(shouldPresent: false)
            switch result {
            case .value:
                completion(true)
            case .error:
                completion(false)
            }
        })
    }
}
