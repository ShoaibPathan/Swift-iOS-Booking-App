//
//  LoadingViewController.swift
//  Qorum
//
//  Created by Vadym Riznychok on 9/25/17.
//  Copyright (c) 2017 Bizico. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import UserNotifications

protocol LoadingDisplayLogic: class {
    func route(to route: Loading.Route)
    func checkState()
    func updateSelectedCityBackground()
    func waitForMarketsLoaded()
}

class LoadingViewController: BaseViewController {
    
    var interactor: LoadingBusinessLogic?
    var router: (NSObjectProtocol & LoadingRoutingLogic & LoadingDataPassing)?
    
    // MARK: - Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = LoadingInteractor()
        let presenter = LoadingPresenter()
        let router = LoadingRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    override var backgroundStyle: BaseViewController.BackgroundAppearance {
        return .qorumLogo
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        QorumNotification.selectedCityChanged.add(observer: self, selector: #selector(citySelected))
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        if isConnected {
            interactor?.checkState()
        } else {
            addNoConnectionOverlay()
        }
    }
    
    override func connectionChanged(isConnected: Bool) {
        super.connectionChanged(isConnected: isConnected)
        if isConnected {
            interactor?.checkState()
        }
    }
    
    override func viewWillUpdateCityBackground() {
        super.viewWillUpdateCityBackground()
        QorumNotification.selectedCityChanged.remove(observer: self)
    }
    
    override func viewDidUpdateCityBackground() {
        super.viewDidUpdateCityBackground()
        interactor?.cityBackgroundUpdated()
    }
    
    @objc func citySelected() {
        QorumNotification.selectedCityChanged.remove(observer: self)
        interactor?.checkState()
    }
    
    @objc func citiesLoaded() {
        QorumNotification.citiesLoaded.remove(observer: self)
        QorumNotification.citiesLoadFailed.remove(observer: self)
        removeNoConnectionOverlay()
        interactor?.checkState()
    }
    
    @objc func citiesLoadFailed() {
        QorumNotification.citiesLoaded.remove(observer: self)
        QorumNotification.citiesLoadFailed.remove(observer: self)
        addNoConnectionOverlay()
        self.perform(#selector(self.reloadMarketsData), with: nil, afterDelay: 5)
    }
    
    @objc func reloadMarketsData() {
        waitForMarketsLoaded()
        CityManager.shared.fetchMarketsData()
    }
}

// MARK: - LoadingDisplayLogic
extension LoadingViewController: LoadingDisplayLogic {
    
    /** Defines screen to show.*/
    func route(to route: Loading.Route) {
        // if it already has routed anywhere, just skip
        guard UIApplication.shared.topMostFullScreenViewController === self else { return }
        switch route {
            
        /** Confirm User Age screen.*/
        case .ageGating:
            router?.navigateToAgeGating(source: self)
            
        /** Tutorial screen.*/
        case .onboarding:
            router?.navigateToOnboarding(source: self)
            
        /** Permissions screen.*/
        case .access:
            router?.navigateToAccess(source: self)
        case .locationBlock:
            router?.navigateToLocationBlock(source: self)
            
        /** App Launch screen.*/
        case .destination(let destination):
            switch destination {
            
            /** Login screen.*/
            case .auth:
                router?.navigateToAuth(source: self)
                
            /** Venues List screen.*/
            case .venues:
                router?.navigateToVenues(source: self)
            }
        }
    }
    
    func checkState() {
        interactor?.checkState()
    }
    
    func waitForMarketsLoaded() {
        QorumNotification.citiesLoaded.add(observer: self, selector: #selector(citiesLoaded))
        QorumNotification.citiesLoadFailed.add(observer: self, selector: #selector(citiesLoadFailed))
    }
}

