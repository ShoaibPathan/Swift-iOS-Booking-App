//
//  LoadingWorker.swift
//  Qorum
//
//  Created by Vadym Riznychok on 9/25/17.
//  Copyright (c) 2017 Bizico. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UserNotifications

/// The vendor cities fetcher
class LoadingWorker {
    
    /// this statement is designed so to just get rid of "will never be executed" compiler warning
    var isSimulator = TARGET_OS_SIMULATOR == 1 && "\(1)" == "1"
    
    var preferredDestination: Loading.Route.Destination {
        if User.stored.isGuest {
            return .auth
        }
        return .venues
    }
    
    /**
     * The overall state of application at startup.
     * Passed to interactor to select initial screen when launches the app.
     */
    var state: Loading.Response {
        let defaults = UserDefaults.standard
        
        /** is the user's age not confirmed, the very first screen */
        guard defaults.bool(for: .didShowAgeGatingKey) else {
            return .blocked(.shouldDisplayAgeGating)
        }
        
        /** is tutorial was not shown */
        guard defaults.bool(for: .didShowOnboardingKey) else {
            return .blocked(.shouldDisplayOnboarding)
        }
        
        /** is location permissions was not requested */
        guard LocationService.shared.isLocationEnabled else {
            return .blocked(.needsLocationAccess)
        }
        guard CityManager.shared.isMarketsLoaded else {
            return .blocked(.needsMarketsLoaded)
        }
        guard LocationService.shared.isLocationInMarketRange else {
            return .blocked(.needsCloserLocation)
        }
        
        /** is the user ignored request to accept notifications access */
        if defaults.bool(for: .notificationAccessIgnored) {
            return .goodToGo
        }
        
        /** is app ready to start */
        if isSimulator {
            return .goodToGo
        }
        
        /** is only notifications permissions was not requested */
        return .needsCheckNotificationsAccess
    }
    
    /**
     * Checks for Push notifications permissions status.
     */
    func notificationsAccessState(completion: @escaping (Bool) -> Void) {
        UNUserNotificationCenter.current().getNotificationSettings { settings in
            DispatchQueue.main.async {
                let accessIsGranted = settings.authorizationStatus == .authorized || UserDefaults.standard.bool(for: .notificationAccessIgnored)
                completion(accessIsGranted)
            }
        }
    }
    
    /**
     * Loads Metadata from server.
     */
    func fetchMetadata(completion: @escaping APIHandler<Metadata>) {
        let request = BasicRequest(target: .fetchMetadata)
        request.performDecoding(completion: completion)
    }
    
    /**
     * Loads Advertising from server.
     */
    func fetchAdvert(completion: @escaping APIHandler<AdvertisementData>) {
        let request = VenuesRequest(target: .fetchAdvert)
        request.performDecoding(for: "data", completion: completion)
    }
    
}
