//
//  AuthViewController.swift
//  Qorum
//
//  Created by Dima Tsurkan on 9/25/17.
//  Copyright (c) 2017 Bizico. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AuthDisplayLogic: class {
    
    /// Displays Auth result
    ///
    /// - Parameter viewModel: Auth ViewModel
    func display(viewModel: Auth.ViewModel)
    
    /// Shows loader
    ///
    /// - Parameter message: Loader message
    func showLoader(_ message: String?)
    
    /// Hides loader
    func hideLoader()
}

class AuthViewController: BaseViewController, SBInstantiable {
    
    static let storyboardName = StoryboardName.auth
    var interactor: AuthBusinessLogic?
    var router: (NSObjectProtocol & AuthRoutingLogic & AuthDataPassing)?
    var authorizeOnAppear = false
    
    // MARK: - Outlets
    @IBOutlet weak var facebookButton: UIButton!
    @IBOutlet weak var guestButton: UIButton!
    
    // MARK: - Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = AuthInteractor()
        let presenter = AuthPresenter()
        let router = AuthRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    override var backgroundStyle: BaseViewController.BackgroundAppearance {
        return .cityImage(qorumLogo: true)
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configureButtons()
        AnalyticsService.shared.track(event: MixpanelEvents.viewRegistrationLoginScreen.rawValue)
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        guard User.stored.isGuest else {
            display(viewModel: .openVenues)
            return
        }
        if authorizeOnAppear == true {
            loginWithFacebook()
        }
    }
    
    // MARK: - Configurations
    
    func configureButtons() {
        
        facebookButton.setAttributedTitle({
            NSMutableAttributedString(
                ("LOGIN WITH ", UIFont.montserrat.light(14), #colorLiteral(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0)),
                ("FACEBOOK", UIFont.montserrat.bold(14), #colorLiteral(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0))
            )
        }(), for: .normal)
        
        facebookButton.setAttributedTitle({
            NSMutableAttributedString(
                ("LOGIN WITH ", UIFont.montserrat.light(14), #colorLiteral(red: 0.75, green: 0.75, blue: 0.75, alpha: 1)),
                ("FACEBOOK", UIFont.montserrat.bold(14), #colorLiteral(red: 0.75, green: 0.75, blue: 0.75, alpha: 1))
            )
        }(), for: .highlighted)
        
        guestButton.setAttributedTitle({
            NSMutableAttributedString(
                ("Continue as Guest", UIFont.montserrat.light(16), #colorLiteral(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0))
            )
        }(), for: .normal)
        
        guestButton.setAttributedTitle({
            NSMutableAttributedString(
                ("Continue as Guest", UIFont.montserrat.light(16), #colorLiteral(red: 0.75, green: 0.75, blue: 0.75, alpha: 1))
            )
        }(), for: .highlighted)
    }
    
    // MARK: - Actions

    /*
     * Opens Facebook Login flow.
     */
    @IBAction func loginWithFacebook() {
        AnalyticsService.shared.track(event: MixpanelEvents.respondToRegistrationLoginScreen.rawValue, properties: ["Response": "Login with Facebook"])
        interactor?.loginWithFacebook()
    }
    
    /*
     * Continues in the Guest Mode.
     */
    @IBAction func proceedGuest() {
        AnalyticsService.shared.track(event: MixpanelEvents.respondToRegistrationLoginScreen.rawValue, properties: ["Response": "Continue As Guest"])
        interactor?.proceedGuest()
    }
    
}

// MARK: - AuthDisplayLogic
extension AuthViewController: AuthDisplayLogic {
    
    func display(viewModel: Auth.ViewModel) {
        switch viewModel {
        case .openVenues:
            router?.routeToVenues()
        case let .alert(title, message):
            UIAlertController.presentAsAlert(title: title, message: message)
        }
    }
    
}
