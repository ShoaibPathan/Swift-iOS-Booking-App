//
//  AuthWorker.swift
//  Qorum
//
//  Created by Dima Tsurkan on 9/25/17.
//  Copyright (c) 2017 Bizico. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import FacebookCore
import FacebookLogin
import Moya
import SwiftyJSON
import Firebase

class AuthWorker {
    
    // MARK: - Public
    
    /*
     * Starts Facebook login.
     * Parameter:
     * - completion: completion block
     */
    func loginWithFacebook(completion: @escaping (Auth.FacebookResponse) -> ()) {
        let loginManager = LoginManager()
        loginManager.logOut()
        let permissions: [ReadPermission] = AppConfig.facebookReadPermissions.map { $0.nativePermission }
        loginManager.logIn(readPermissions: permissions, viewController: nil) { loginResult in
            switch loginResult {
            case let .success(_, _, token):
                completion(.token(token.authenticationToken))
            case let .failed(error):
                let errorTitle = "AuthWorker loginWithFacebook failure"
                print(errorTitle, error)
                error.developerModeAlert(title: errorTitle) {
                    completion(.error(error))
                }
            case .cancelled:
                completion(.cancelled)
            }
        }
    }
    
    // MARK: - Internal
    
    /*
     * Submits Facebook access token to the Qorum server.
     * Parameter:
     * - accessToken: Facebook Token
     * - competion: completion block
     */
    func signIn(accessToken: String,
                completion: @escaping (Auth.SignInResult) -> Void) {
        let request = BasicRequest(target: .socialAuth(accessToken: accessToken))
        request.perform { response in
            switch response.result {
            case let .value(json):
                guard let token = json["token"].string else {
                    let errorTitle = "AuthWorker signIn error: token missing"
                    let errorDescription = "response:\n\(json)"
                    print(errorTitle, errorDescription)
                    errorDescription.developerModeAlert(title: errorTitle) {
                        completion(.error(errorTitle))
                    }
                    return
                }
                AppToken.token = token
                switch User.result(json: json["patron"]) {
                case let .value(user):
                    AnalyticsService.shared.track(event: MixpanelEvents.logIn.rawValue)
                    completion(.authorized(user))
                case let .error(error):
                    let errorTitle = "AuthWorker signIn: user parsing failed"
                    print(errorTitle, error)
                    error.developerModeAlert(title: errorTitle) {
                        completion(.error(error))
                    }
                }
            case let .error(error):
                guard let genericError = error as? GenericError, genericError.status == 401 else {
                    print("AuthWorker signIn error: \(error)")
                    completion(.error(error))
                    return
                }
                FBUser.fetch { fbFetchResult in
                    switch fbFetchResult {
                    case let .value(fbUser):
                        completion(.needsToRegister(fbUser))
                    case let .error(error):
                        completion(.error(error))
                    }
                }
            }
        }
    }
    
    /*
     * Registers new user on Qorum's server.
     * Parameter:
     * - fbUser: user model fetched from Facebook
     * - accessToken: Facebook Token
     * - competion: completion block
     */
    func register(fbUser: FBUser,
                  accessToken: String,
                  completion: @escaping APIHandler<User>) {
        let defaults = UserDefaults.standard
        var params: [String: Any] = [:]
        params["first_name"] = fbUser.firstName
        params["last_name"] = fbUser.lastName
        if let birthDate = fbUser.birthDate {
            params["birthdate"] = Date.standardDateFormatter.string(from: birthDate)
        } else {
            params["birthdate"] = nil
        }
        params["gender"] = fbUser.gender.stringValue
        params["zip"] = nil
        params["email"] = fbUser.email
        params["facebook_token"] = accessToken
        params["password"] = nil
        params["code"] = defaults.referralCode
        let request = AuthenticatedRequest(target: .registerUser(params: params))
        request.performDecoding { (result: APIResult<Auth.RegisterResult>) in
            switch result {
            case let .value(data):
                AppToken.token = data.token
                defaults.referralCode = nil
                let profileWorker = ProfileWorker()
                profileWorker.fetchUser(id: data.id) { fetchResult in
                    switch fetchResult {
                    case let .value(user):
                        profileWorker.fetchFacebookAvatar(maxSize: 50) { avatarResult in
                            switch avatarResult {
                            case let .value(avatar):
                                user.isAvatarPlaceholder = avatar.isPlaceholder
                            case .error:
                                user.isAvatarPlaceholder = true
                            }
                            AnalyticsService.shared.trackRegister(user: user)
                            completion(.value(user))
                        }
                    case let .error(error):
                        completion(.error(error))
                    }
                }
            case let .error(error):
                completion(.error(error))
            }
        }
    }
    
    /*
     * Submits Device token for Push Notifications service.
     */
    func updateAPNSDeviceToken() {
        let user = User.stored
        guard !user.isGuest else { return }
        InstanceID.instanceID().instanceID { result, error in
            if let token = result?.token {
                let request = AuthenticatedRequest(target: .updateDeviceToken(token: token, userId: user.userId))
                request.perform { response in
                    print("updateDeviceToken response:", response)
                }
            } else if let error = error {
                debugPrint(error)
            }
        }
    }
    
}

extension FBReadPermission {
    
    var nativePermission: ReadPermission {
        switch self {
        case .publicProfile: return .publicProfile
        case .userFriends: return .userFriends
        case .email: return .email
        case .userAboutMe: return .userAboutMe
        case .userActionsBooks: return .userActionsBooks
        case .userActionsFitness: return .userActionsFitness
        case .userActionsMusic: return .userActionsMusic
        case .userActionsNews: return .userActionsNews
        case .userActionsVideo: return .userActionsVideo
        case .userBirthday: return .userBirthday
        case .userEducationHistory: return .userEducationHistory
        case .userEvents: return .userEvents
        case .userGamesActivity: return .userGamesActivity
        case .userGender: return .userGender
        case .userHometown: return .userHometown
        case .userLikes: return .userLikes
        case .userLocation: return .userLocation
        case .userManagedGroups: return .userManagedGroups
        case .userPhotos: return .userPhotos
        case .userPosts: return .userPosts
        case .userRelationships: return .userRelationships
        case .userRelationshipDetails: return .userRelationshipDetails
        case .userReligionPolitics: return .userReligionPolitics
        case .userTaggedPlaces: return .userTaggedPlaces
        case .userVideos: return .userVideos
        case .userWebsite: return .userWebsite
        case .userWorkHistory: return .userWorkHistory
        case .readCustomFriendlists: return .readCustomFriendlists
        case .readInsights: return .readInsights
        case .readAudienceNetworkInsights: return .readAudienceNetworkInsights
        case .readPageMailboxes: return .readPageMailboxes
        case .pagesShowList: return .pagesShowList
        case .pagesManageCta: return .pagesManageCta
        case .pagesManageInstantArticles: return .pagesManageInstantArticles
        case .adsRead: return .adsRead
        }
    }
    
}

extension ReadPermission {
    
    var qorumReadPermission: FBReadPermission? {
        switch self {
        case .publicProfile: return .publicProfile
        case .userFriends: return .userFriends
        case .email: return .email
        case .userAboutMe: return .userAboutMe
        case .userActionsBooks: return .userActionsBooks
        case .userActionsFitness: return .userActionsFitness
        case .userActionsMusic: return .userActionsMusic
        case .userActionsNews: return .userActionsNews
        case .userActionsVideo: return .userActionsVideo
        case .userBirthday: return .userBirthday
        case .userEducationHistory: return .userEducationHistory
        case .userEvents: return .userEvents
        case .userGamesActivity: return .userGamesActivity
        case .userGender: return .userGender
        case .userHometown: return .userHometown
        case .userLikes: return .userLikes
        case .userLocation: return .userLocation
        case .userManagedGroups: return .userManagedGroups
        case .userPhotos: return .userPhotos
        case .userPosts: return .userPosts
        case .userRelationships: return .userRelationships
        case .userRelationshipDetails: return .userRelationshipDetails
        case .userReligionPolitics: return .userReligionPolitics
        case .userTaggedPlaces: return .userTaggedPlaces
        case .userVideos: return .userVideos
        case .userWebsite: return .userWebsite
        case .userWorkHistory: return .userWorkHistory
        case .readCustomFriendlists: return .readCustomFriendlists
        case .readInsights: return .readInsights
        case .readAudienceNetworkInsights: return .readAudienceNetworkInsights
        case .readPageMailboxes: return .readPageMailboxes
        case .pagesShowList: return .pagesShowList
        case .pagesManageCta: return .pagesManageCta
        case .pagesManageInstantArticles: return .pagesManageInstantArticles
        case .adsRead: return .adsRead
        case .custom: return nil
        }
    }
    
}
