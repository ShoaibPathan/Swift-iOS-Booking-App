//
//  AuthModels.swift
//  Qorum
//
//  Created by Dima Tsurkan on 9/25/17.
//  Copyright (c) 2017 Bizico. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SwiftyJSON

struct Auth {
    
    enum FacebookResponse {
        
        /* facebook token received */
        case token(String)
        
        /* facebook error received */
        case error(Error)
        
        /* facebook login flow cancelled */
        case cancelled
    }
    
    enum SignInResult {
        
        /* user authorized */
        case authorized(User)
        
        /* new user received from facebook */
        case needsToRegister(FBUser)
        
        /* sign in error received */
        case error(Error)
    }
    
    struct RegisterResult {
        let id: Int
        let token: String
    }
    
    enum Response {
        
        /* response to open venue */
        case mayOpenVenues
        
        /* respone to present illegal age alert */
        case userOfIllegalAge
        
        /* response to present error */
        case error(Error)
    }
    
    enum ViewModel {
        case openVenues
        case alert(title: String?, message: String)
    }
    
}

extension Auth.RegisterResult: JSONAbleType {

    /// Parses RegisterResults struct from JSON.
    ///
    /// - Parameter json: JSON Dictionary
    ///
    static func from(json: JSON) throws -> Auth.RegisterResult {
        let id = try json["id"].expectingInt()
        let token = try json["token"].expectingString()
        return Auth.RegisterResult(id: id, token: token)
    }
    
}

extension UserDefaults {
    
    private static let referralCodeKey = "BranchReferralCode"
    
    /// stores/saves referral code to User Defaults
    var referralCode: String? {
        get {
            return string(forKey: UserDefaults.referralCodeKey)
        } set {
            guard let code = newValue else {
                removeObject(forKey: UserDefaults.referralCodeKey)
                return
            }
            set(code, forKey: UserDefaults.referralCodeKey)
        }
    }
    
}

