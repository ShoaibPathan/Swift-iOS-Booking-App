//
//  AuthRouter.swift
//  Qorum
//
//  Created by Dima Tsurkan on 9/25/17.
//  Copyright (c) 2017 Bizico. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

@objc protocol AuthRoutingLogic {
    func routeToVenues()
    func routeToAgeCheck()
}

protocol AuthDataPassing {
    var dataStore: AuthDataStore? { get }
}

class AuthRouter: NSObject, AuthRoutingLogic, AuthDataPassing {
    
    
    weak var viewController: AuthViewController?
    var dataStore: AuthDataStore?
  
    // MARK: - Routing
    /*
     * Shows list of Venues Screen.
     */
    func routeToVenues() {
        if let viewControllers = viewController?.navigationController?.viewControllers {
            if viewControllers.contains(where: { $0 is VenuesViewController || $0 is MapViewController }) {
                viewController?.navigationController?.popViewController(animated: true)
                return
            }
        }
        
        let destinationVC = VenuesViewController.fromStoryboard
        navigateVenues(source: viewController!, destination: destinationVC)
    }
    
    /*
     * Shows Age Date Picker.
     */
    func routeToAgeCheck() {
        let destinationVC = AuthBirthDateViewController.fromStoryboard
        viewController?.navigationController?.pushViewController(destinationVC, animated: false)
    }
    
    // MARK: - Navigation
    
    /*
     * Navigates to list of Venues Screen.
     * Parameter:
     * -source: source screen
     * -destination: destination screen
     */
    func navigateVenues(source: AuthViewController, destination: VenuesViewController) {
        guard let navigationController = source.navigationController else {
            fatalError("AuthViewController missing its navigationController")
        }
        let rootVC = navigationController.viewControllers.first ?? LoadingViewController()
        // we keep the Loading (root) scene in the nav. stack so it will observe connection changes and react to them accordingly
        navigationController.setViewControllers([rootVC, destination], animated: true)
    }
    
}
