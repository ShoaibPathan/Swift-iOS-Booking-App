//
//  AuthInteractor.swift
//  Qorum
//
//  Created by Dima Tsurkan on 9/25/17.
//  Copyright (c) 2017 Bizico. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import FBSDKCoreKit
import SwiftyJSON
import Firebase

protocol AuthBusinessLogic {
    func loginWithFacebook()
    func proceedGuest()
}

protocol AuthDataStore {
    var user: User? { get }
}

class AuthInteractor: AuthDataStore {
    var presenter: AuthPresentationLogic?
    private(set) lazy var worker = AuthWorker()
    var user: User?
    
    /*
     * Updates User info and starts the App.
     * Parameter:
     * - user: logged-in user
     */
    func process(user: User) {
        guard user.isMature else {
            presenter?.present(response: .userOfIllegalAge)
            return
        }
        self.user = user
        user.save()
        worker.updateAPNSDeviceToken()
        AnalyticsService.shared.trackLogin(user: user)
        Crashlytics.sharedInstance().setUserEmail(user.email)
        Crashlytics.sharedInstance().setUserName("\(user.firstName ?? "") \(user.lastName ?? "")")
        presenter?.present(response: .mayOpenVenues)
        QorumNotification.userLoggedIn.post()
        FBFriend.fetch { (result) in
            switch result {
            case let .value(friends):
                user.facebookFriends = friends
                user.save()
                print("Did load friends \(friends.count)")
            case let .error(error):
                print("AuthInteractor login - fetchUser - FBFriend fetch error:", error)
            }
        }
    }
    
}

// MARK: - AuthBusinessLogic
extension AuthInteractor: AuthBusinessLogic {
    
    /*
     * Starts Facebook Login flow.
     */
    func loginWithFacebook() {
        worker.loginWithFacebook { [weak self] result in
            switch result {
            case let .token(token):
                self?.presenter?.presentLoginLoader()
                self?.worker.signIn(accessToken: token) { [weak self] result in
                    switch result {
                    case let .authorized(user):
                        self?.presenter?.hideLoader()
                        self?.process(user: user)
                    case let .needsToRegister(fbUser):
                        self?.worker.register(fbUser: fbUser, accessToken: token) { [weak self] result in
                            self?.presenter?.hideLoader()
                            switch result {
                            case let .value(user):
                                self?.process(user: user)
                            case let .error(error):
                                self?.presenter?.present(response: .error(error))
                            }
                        }
                    case let .error(error):
                        self?.presenter?.hideLoader()
                        self?.presenter?.present(response: .error(error))
                    }
                }
            case let .error(error):
                self?.presenter?.present(response: .error(error))
            case .cancelled:
                break
            }
        }
    }
    
    /*
     * Continues in the Guest Mode.
     */
    func proceedGuest() {
        user = .guestUser
        presenter?.present(response: .mayOpenVenues)
    }
    
}
